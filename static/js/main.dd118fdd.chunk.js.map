{"version":3,"sources":["reportWebVitals.js","serviceWorkerRegistration.js","assets/symbol-defs.svg","components/icon/Icon.js","components/button/Button.js","utils/id.js","utils/fetcher.js","pages/magic/Magic.js","components/page/Header.js","components/spinner/Spinner.js","utils/useLanguage.js","assets/germany.svg","assets/usa.svg","components/page/Page.js","components/select/Select.js","components/number-input/NumberInput.js","state/lists.js","assets/warhammer-fantasy.png","assets/the-old-world.png","pages/new-list/NewList.js","utils/rules.js","components/list/List.js","utils/unit.js","utils/points.js","utils/list.js","pages/editor/Editor.js","utils/throttle.js","assets/army-icons/the-empire.svg","assets/army-icons/dwarfs.svg","assets/army-icons/greenskins.svg","assets/army-icons/beastmen.svg","assets/army-icons/chaos-deamons.svg","assets/army-icons/chaos-warriors.svg","assets/army-icons/dark-elves.svg","assets/army-icons/high-elves.svg","assets/army-icons/lizardmen.svg","assets/army-icons/ogres.svg","assets/army-icons/skaven.svg","assets/army-icons/tomb-kings.svg","assets/army-icons/vampire-counts.svg","assets/army-icons/wood-elves.svg","assets/army-icons/chaos-dwarfs.svg","assets/army-icons/bretonnia.svg","pages/home/Home.js","state/items.js","pages/magic/name-map.js","state/army.js","pages/unit/Unit.js","pages/edit-list/EditList.js","pages/about/About.js","pages/add/Add.js","pages/help/Help.js","pages/export/Export.js","pages/print/Print.js","pages/duplicate-list/DuplicateList.js","pages/rename/Rename.js","components/expandable/Expandable.js","index.js","pages/datasets/Entity.js","pages/datasets/UnitPreview.js","pages/datasets/Datasets.js","pages/not-found/NotFound.js","pages/privacy/Privacy.js","pages/changelog/Changelog.js","App.js","state/errors.js","store.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Icon","className","symbol","color","focusable","classNames","xlinkHref","icons","Button","type","to","onClick","children","spaceBottom","spaceTop","fullWidth","label","icon","centered","submitButton","disabled","size","Component","Link","buttonProps","aria-label","title","defaultProps","prevItemType","isFirstItemType","getRandomId","Math","random","toString","replace","updateIds","map","unit","command","commandData","index","id","equipment","equipmentData","armor","armorData","mounts","mountsData","options","optionsData","Header","headline","subheadline","moreButton","isSection","hasPointsError","hasMainNavigation","intl","useIntl","useLocation","useState","showMenu","setShowMenu","navigationLinks","name","formatMessage","navigation","useEffect","pathname","callback","moreButtonTo","Spinner","useLanguage","language","localStorage","getItem","Main","isDesktop","compact","loading","handleLanguageChange","event","setItem","target","value","reload","onChange","defaultChecked","htmlFor","width","alt","src","usa","germany","Select","required","selected","defaultValue","name_de","name_en","optionValue","NumberInput","props","pattern","preventDefault","Number","max","min","listsSlice","createSlice","initialState","reducers","setLists","payload","updateList","listId","newValues","points","description","Object","keys","forEach","key","undefined","list","deleteList","filter","addUnit","newUnit","strength","minimum","duplicateUnit","unitId","find","split","editUnit","magic","detachments","data","removeUnit","actions","duplicateList","NewList","isMobile","MainComponent","Fragment","dispatch","useDispatch","lists","useSelector","game","setGame","gameSystems","armies","army","setArmy","setName","setDescription","setPoints","redirect","setRedirect","handleSystemChange","scrollTo","onSubmit","newId","newList","lords","heroes","core","special","rare","characters","mercenaries","allies","newLists","JSON","stringify","createList","checked","height","warhammerFantasy","warhammerTheOldWorld","autoComplete","maxLength","rules","maxPercent","minPercent","maxSame","maxSameLarge","getMaxPercentData","armyPoints","maxPoints","floor","overLimit","diff","ceil","List","active","getAllOptions","asString","noMagic","allCommand","allEquipment","allArmor","allOptions","allStackableOptions","stackableCount","allMounts","allMagicItems","items","allDetachments","allOptionsArray","allOptionsString","join","getUnitPoints","unitPoints","option","stackable","perModel","detachment","getUnitMagicPoints","commandIndex","getUnitCommandPoints","commandPoints","getPoints","getAllPoints","updatedList","updatedLists","parse","Editor","useParams","onScroll","document","hash","sessionStorage","pageYOffset","addEventListener","limit","wait","call","setTimeout","throttle","removeEventListener","allPoints","lordsPoints","heroesPoints","charactersPoints","corePoints","specialPoints","rarePoints","mercenariesPoints","alliesPoints","lordsData","heroesData","charactersData","coreData","minPoints","getMinPercentData","specialData","rareData","mercenariesData","alliesData","moreButtons","removeList","includes","armyIconMap","theEmpire","dwarfs","greenskins","chaosWarriors","bretonnia","beastmen","woodElves","tombKings","highElves","darkElves","skaven","vampireCounts","chaosDeamons","ogres","lizardmen","chaosDwarfs","Home","length","fetcher","url","onError","AbortController","fetch","process","headers","Accept","signal","response","json","itemsSlice","setItems","nameMap","heirlooms","general","weapon","talisman","banner","artifact","triptych","Magic","isLoading","setIsLoading","units","maxMagicPoints","handleMagicChange","magicItem","magicItems","allItems","item","conditional","conditionalItem","conditionalIndex","getCheckbox","itemGroup","isConditional","isChecked","types","confitionalItem","armySlice","Unit","coreUnit","magicPoints","handleDuplicate","handleRemove","maximum","commandMagicPoints","handleCommandChange","handleEquipmentChange","handleArmorChange","handleStackableOptionChange","handleOptionsChange","regimentalUnit","unitDetachments","push","handleAddDetachmentClick","handleDetachmentStrengthClick","handleDeleteDetachmentClick","handleMountsChange","EditList","updateLocalList","About","values","owb","github","href","rel","datasets","discord","gameIcons","license","Add","handleAdd","Help","getUnitsString","isShowList","Export","copied","setCopied","copyError","setCopyError","setIsShowList","listText","armyName","getListAsText","clipboard","writeText","readOnly","Print","isPrinting","setIsPrinting","onafterprint","print","DuplicateList","Rename","Expandable","notBold","open","noMargin","messages","initialUnitState","magicItemTypes","Entity","existingUnit","randomId","setUnit","handleFieldChange","handleSecondLevelFieldChange","field","newEntries","entry","entryIndex","handleSecondLevelDelete","_","handleSecondLevelNameBlur","isNew","toLowerCase","onBlur","placeholder","itemIndex","newCommandEntries","handleCommandMagicChange","handleCommandMagicPointsChange","mount","handleMagicPointsChange","UnitPreview","coreUnits","onClose","Datasets","previewUnit","setPreviewUnit","armyInput","setArmyInput","localDataset","dataset","setDataset","handleSubmit","newDataset","handleDelete","handlePreview","existingDataset","onDelete","rows","spellCheck","data-gramm","NotFound","Privacy","Changelog","Date","month","day","year","privacy","App","matchMedia","matches","setIsMobile","localLists","path","exact","errorSlice","setErrors","addError","configureStore","reducer","listsReducer","armyReducer","itemsReducer","errors","errorsReducer","locale","userLanguage","slice","indexOf","documentElement","setAttribute","querySelector","de","en","German","English","ReactDOM","render","store","StrictMode","getElementById","URL","origin","contentType","get","status","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.dd118fdd.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/symbol-defs.edd30f1f.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nimport icons from \"../../assets/symbol-defs.svg\";\n\nimport \"./Icon.css\";\n\nexport const Icon = ({ className, symbol, color }) => {\n  return (\n    <svg\n      focusable=\"false\"\n      className={classNames(\"icon\", color && `icon--${color}`, className)}\n    >\n      <use xlinkHref={`${icons}#icon-${symbol}`} />\n    </svg>\n  );\n};\n\nIcon.propTypes = {\n  className: PropTypes.string,\n  symbol: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nimport { Icon } from \"..//icon\";\n\nimport \"./Button.css\";\n\nexport const Button = ({\n  className,\n  type,\n  to,\n  onClick,\n  children,\n  spaceBottom,\n  spaceTop,\n  fullWidth,\n  label,\n  icon,\n  centered,\n  color,\n  submitButton,\n  disabled,\n  size,\n}) => {\n  const Component = to ? Link : \"button\";\n  const buttonProps = {};\n\n  if (!to) {\n    if (submitButton) {\n      buttonProps.type = \"submit\";\n    } else {\n      buttonProps.type = \"button\";\n    }\n  }\n\n  return (\n    <Component\n      className={classNames(\n        \"button\",\n        `button--${type}`,\n        color && `button--${color}`,\n        spaceBottom && \"button--spaceBottom\",\n        spaceTop && \"button--spaceTop\",\n        fullWidth && \"button--fullWidth\",\n        centered && \"button--centered\",\n        disabled && \"button--disabled\",\n        `button--${size}`,\n        className\n      )}\n      onClick={onClick}\n      to={to}\n      aria-label={label}\n      title={label}\n      disabled={disabled}\n      {...buttonProps}\n    >\n      {icon && (\n        <Icon\n          className={classNames(children && \"button__icon\")}\n          symbol={icon}\n        />\n      )}\n      {children && children}\n    </Component>\n  );\n};\n\nButton.propTypes = {\n  className: PropTypes.string,\n  type: PropTypes.string,\n  to: PropTypes.string,\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n  spaceBottom: PropTypes.bool,\n  spaceTop: PropTypes.bool,\n  fullWidth: PropTypes.bool,\n  centered: PropTypes.bool,\n  icon: PropTypes.string,\n  color: PropTypes.string,\n  submitButton: PropTypes.bool,\n  disabled: PropTypes.bool,\n  size: PropTypes.string,\n};\n\nButton.defaultProps = {\n  type: \"primary\",\n  size: \"large\",\n};\n","export const getRandomId = () =>\n  Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, \"\");\n\nexport const updateIds = (type = []) => {\n  return type.map((unit) => {\n    return {\n      ...unit,\n      command: unit.command\n        ? unit.command.map((commandData, index) => ({\n            ...commandData,\n            id: index,\n          }))\n        : null,\n      equipment: unit.equipment\n        ? unit.equipment.map((equipmentData, index) => ({\n            ...equipmentData,\n            id: index,\n          }))\n        : null,\n      armor: unit.armor\n        ? unit.armor.map((armorData, index) => ({\n            ...armorData,\n            id: index,\n          }))\n        : null,\n      mounts: unit.mounts\n        ? unit.mounts.map((mountsData, index) => ({\n            ...mountsData,\n            id: index,\n          }))\n        : null,\n      options: unit.options\n        ? unit.options.map((optionsData, index) => ({\n            ...optionsData,\n            id: index,\n          }))\n        : null,\n    };\n  });\n};\n","import \"abortcontroller-polyfill/dist/abortcontroller-polyfill-only\";\n\nconst baseUrl = \"/\";\nlet controller;\n\nconst abortFetch = () => {\n  controller && controller.abort();\n};\nexport const fetcher = ({ url, onSuccess, onError }) => {\n  controller = new AbortController();\n\n  fetch(`${baseUrl}${url}.json?v=${process.env.REACT_APP_VERSION}`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    signal: controller.signal,\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      if (onSuccess) {\n        onSuccess(data);\n      }\n    })\n    .catch((error) => {\n      if (onError) {\n        onError(error);\n      }\n    });\n};\n\nexport { abortFetch };\n","import { Fragment, useEffect, useState } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useIntl } from \"react-intl\";\nimport classNames from \"classnames\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { getUnitMagicPoints } from \"../../utils/points\";\nimport { fetcher } from \"../../utils/fetcher\";\nimport { Header, Main } from \"../../components/page\";\nimport { setItems } from \"../../state/items\";\nimport { editUnit } from \"../../state/lists\";\nimport { useLanguage } from \"../../utils/useLanguage\";\nimport { updateList } from \"../../utils/list\";\nimport gameSystems from \"../../assets/armies.json\";\n\nimport { nameMap } from \"./name-map\";\nimport \"./Magic.css\";\n\nlet prevItemType, isFirstItemType;\n\nconst updateIds = (items) => {\n  return items.map((item) => ({\n    ...item,\n    items: item.items.map((data, index) => {\n      if (data.conditional) {\n        return {\n          ...data,\n          id: index,\n          conditional: data.conditional.map(\n            (conditionalItem, conditionalIndex) => ({\n              ...conditionalItem,\n              id: `${index}-${conditionalIndex}`,\n            })\n          ),\n        };\n      }\n\n      return {\n        ...data,\n        id: index,\n      };\n    }),\n  }));\n};\n\nexport const Magic = ({ isMobile }) => {\n  const MainComponent = isMobile ? Main : Fragment;\n  const location = useLocation();\n  const { language } = useLanguage();\n  const intl = useIntl();\n  const [isLoading, setIsLoading] = useState(true);\n  const { listId, type, unitId, command } = useParams();\n  const dispatch = useDispatch();\n  const list = useSelector((state) =>\n    state.lists.find(({ id }) => listId === id)\n  );\n  const army =\n    list &&\n    gameSystems\n      .find(({ id }) => id === list.game)\n      .armies.find(({ id }) => list.army === id);\n  const items = useSelector((state) => state.items);\n  const units = list ? list[type] : null;\n  const unit = units && units.find(({ id }) => id === unitId);\n  const maxMagicPoints =\n    (unit &&\n      unit.command &&\n      unit.command[command] &&\n      unit.command[command]?.magic?.maxPoints) ||\n    (unit && unit.magic.maxPoints);\n  const handleMagicChange = (event, magicItem) => {\n    let magicItems;\n\n    if (event.target.checked) {\n      magicItems = [\n        ...(unit?.magic?.items || []),\n        {\n          ...magicItem,\n          command: Number(command),\n          id: event.target.value,\n        },\n      ];\n    } else {\n      magicItems = unit.magic.items.filter(\n        ({ id }) => id !== event.target.value\n      );\n    }\n\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        magic: {\n          ...unit.magic,\n          items: magicItems,\n        },\n      })\n    );\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  useEffect(() => {\n    list && updateList(list);\n  }, [list]);\n\n  useEffect(() => {\n    army &&\n      fetcher({\n        url: `games/${list.game}/magic-items`,\n        onSuccess: (data) => {\n          const allItems = army.items.map((item) => {\n            return {\n              items: data[item],\n              name_de: nameMap[item].name_de,\n              name_en: nameMap[item].name_en,\n              id: item,\n            };\n          });\n\n          dispatch(setItems(updateIds(allItems)));\n          setIsLoading(false);\n        },\n      });\n  }, [army, dispatch, list, setIsLoading, unit, language]);\n\n  if (isLoading) {\n    if (isMobile) {\n      return (\n        <>\n          <Header to={`/editor/${listId}/${type}/${unitId}`} />\n          <Main loading />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <Header to={`/editor/${listId}/${type}/${unitId}`} isSection />\n          <Main loading />\n        </>\n      );\n    }\n  }\n\n  const getCheckbox = ({ unit, magicItem, itemGroup, isConditional }) => {\n    const isChecked = unit?.magic?.items\n      ? unit.magic.items.find(\n          ({ id }) => id === `${itemGroup.id}-${magicItem.id}`\n        ) || false\n      : false;\n\n    return (\n      <div\n        className={classNames(\n          \"checkbox\",\n          isConditional && \"checkbox--conditional\"\n        )}\n        key={magicItem.id}\n      >\n        <input\n          type=\"checkbox\"\n          id={`${itemGroup.id}-${magicItem.id}`}\n          value={`${itemGroup.id}-${magicItem.id}`}\n          onChange={(event) => handleMagicChange(event, magicItem)}\n          checked={isChecked}\n          className=\"checkbox__input\"\n        />\n        <label\n          htmlFor={`${itemGroup.id}-${magicItem.id}`}\n          className=\"checkbox__label\"\n        >\n          {language === \"de\" ? magicItem.name_de : magicItem.name_en}\n          <i className=\"checkbox__points\">{`${\n            magicItem.points\n          } ${intl.formatMessage({\n            id: \"app.points\",\n          })}`}</i>\n        </label>\n      </div>\n    );\n  };\n  const hasPointsError = getUnitMagicPoints({ unit, command }) > maxMagicPoints;\n\n  return (\n    <>\n      <Helmet>\n        <title>{`Old World Builder | ${list?.name}`}</title>\n      </Helmet>\n\n      {isMobile && (\n        <Header\n          to={`/editor/${listId}/${type}/${unitId}`}\n          headline={intl.formatMessage({\n            id: \"unit.magicItems\",\n          })}\n          subheadline={\n            <>\n              <span\n                className={classNames(\n                  \"magic__header-points\",\n                  hasPointsError && \"magic__header-points--error\"\n                )}\n              >\n                {`${getUnitMagicPoints({ unit, command })}`}&nbsp;\n              </span>\n              {`/ ${maxMagicPoints} ${intl.formatMessage({\n                id: \"app.points\",\n              })}`}\n            </>\n          }\n          hasPointsError={hasPointsError}\n        />\n      )}\n\n      <MainComponent>\n        {!isMobile && (\n          <Header\n            isSection\n            to={`/editor/${listId}/${type}/${unitId}`}\n            headline={intl.formatMessage({\n              id: \"unit.magicItems\",\n            })}\n            subheadline={\n              <>\n                <span\n                  className={classNames(\n                    \"magic__header-points\",\n                    hasPointsError && \"magic__header-points--error\"\n                  )}\n                >\n                  {`${getUnitMagicPoints({ unit, command })}`}&nbsp;\n                </span>\n                {`/ ${maxMagicPoints} ${intl.formatMessage({\n                  id: \"app.points\",\n                })}`}\n              </>\n            }\n            hasPointsError={hasPointsError}\n          />\n        )}\n        {items.map((itemGroup) => (\n          <Fragment key={itemGroup.name_de}>\n            <h2 className=\"unit__subline\">\n              {language === \"de\" ? itemGroup.name_de : itemGroup.name_en}\n            </h2>\n            {itemGroup.items.map((magicItem) => {\n              if (prevItemType !== magicItem.type) {\n                prevItemType = magicItem.type;\n                isFirstItemType = true;\n              } else {\n                isFirstItemType = false;\n              }\n\n              // Filter command magic items\n              if (\n                unit?.command &&\n                unit?.command[command] &&\n                !unit.command[command].magic.types.includes(magicItem.type)\n              ) {\n                return null;\n              }\n\n              // Filter magic items\n              if (\n                unit?.magic?.types &&\n                unit?.magic?.types.length &&\n                !unit.magic.types.includes(magicItem.type)\n              ) {\n                return null;\n              }\n\n              const isChecked = unit?.magic?.items\n                ? unit.magic.items.find(\n                    ({ id }) => id === `${itemGroup.id}-${magicItem.id}`\n                  ) || false\n                : false;\n\n              return (\n                <Fragment key={magicItem.name_de}>\n                  {isFirstItemType && (\n                    <h3 className=\"magic__type\">\n                      {nameMap[magicItem.type][`name_${language}`]}\n                    </h3>\n                  )}\n                  {getCheckbox({ unit, magicItem, itemGroup })}\n                  {magicItem.conditional && isChecked\n                    ? magicItem.conditional.map((confitionalItem) =>\n                        getCheckbox({\n                          unit,\n                          magicItem: confitionalItem,\n                          itemGroup,\n                          isConditional: true,\n                        })\n                      )\n                    : null}\n                </Fragment>\n              );\n            })}\n          </Fragment>\n        ))}\n      </MainComponent>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { useLocation } from \"react-router-dom\";\nimport { useIntl } from \"react-intl\";\n\nimport { Button } from \"../../components/button\";\nimport { Icon } from \"../../components/icon\";\n\nimport \"./Header.css\";\n\nexport const Header = ({\n  className,\n  headline,\n  subheadline,\n  moreButton,\n  to,\n  isSection,\n  hasPointsError,\n  hasMainNavigation,\n}) => {\n  const intl = useIntl();\n  const location = useLocation();\n  const [showMenu, setShowMenu] = useState(false);\n  const Component = isSection ? \"section\" : \"header\";\n  const handleMenuClick = () => {\n    setShowMenu(!showMenu);\n  };\n  const navigationLinks = [\n    {\n      name: intl.formatMessage({\n        id: \"footer.about\",\n      }),\n      to: \"/about\",\n    },\n    {\n      name: intl.formatMessage({\n        id: \"footer.help\",\n      }),\n      to: \"/help\",\n    },\n    {\n      name: intl.formatMessage({\n        id: \"footer.datasets\",\n      }),\n      to: \"/datasets\",\n    },\n    {\n      name: intl.formatMessage({\n        id: \"footer.changelog\",\n      }),\n      to: \"/changelog\",\n    },\n  ];\n  const navigation = hasMainNavigation ? navigationLinks : moreButton;\n\n  useEffect(() => {\n    setShowMenu(false);\n  }, [location.pathname]);\n\n  return (\n    <Component\n      className={classNames(isSection ? \"column-header\" : \"header\", className)}\n    >\n      {to ? (\n        <Button\n          type=\"text\"\n          to={to}\n          label={\n            isSection\n              ? intl.formatMessage({ id: \"header.close\" })\n              : intl.formatMessage({ id: \"header.back\" })\n          }\n          color={isSection ? \"dark\" : \"light\"}\n          icon={isSection ? \"close\" : \"back\"}\n        />\n      ) : (\n        <>{navigation && <div className=\"header__empty-icon\" />}</>\n      )}\n      <div className=\"header__text\">\n        {headline && <h1 className=\"header__name\">{headline}</h1>}\n        {subheadline && (\n          <p className=\"header__points\">\n            {subheadline}{\" \"}\n            {hasPointsError && <Icon symbol=\"error\" color=\"red\" />}\n          </p>\n        )}\n      </div>\n      {navigation ? (\n        <Button\n          type=\"text\"\n          className={classNames(showMenu && \"header__more-button\")}\n          color={isSection ? \"dark\" : \"light\"}\n          label={intl.formatMessage({ id: \"header.more\" })}\n          icon=\"more\"\n          onClick={handleMenuClick}\n        />\n      ) : (\n        <>{to && <div className=\"header__empty-icon\" />}</>\n      )}\n      {showMenu && (\n        <ul\n          className={classNames(\n            \"header__more\",\n            !hasMainNavigation && \"header__more--secondary-navigation\"\n          )}\n        >\n          {navigation.map(({ callback, name, icon, to: moreButtonTo }) => (\n            <li key={name}>\n              <Button\n                type=\"text\"\n                onClick={callback}\n                to={moreButtonTo}\n                icon={icon}\n              >\n                {name}\n              </Button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Component>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string,\n  to: PropTypes.string,\n  headline: PropTypes.string,\n  subheadline: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  children: PropTypes.node,\n  moreButton: PropTypes.array,\n  isSection: PropTypes.bool,\n  hasPointsError: PropTypes.bool,\n  hasMainNavigation: PropTypes.bool,\n};\n","import React from \"react\";\n\nimport { Icon } from \"../icon\";\n\nimport \"./Spinner.css\";\n\nexport const Spinner = () => {\n  return <Icon symbol=\"spinner\" className=\"spinner\" />;\n};\n","export const useLanguage = () => {\n  return { language: localStorage.getItem(\"lang\") };\n};\n","export default __webpack_public_path__ + \"static/media/germany.d9625f93.svg\";","export default __webpack_public_path__ + \"static/media/usa.699fdb72.svg\";","import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { Spinner } from \"../../components/spinner\";\nimport { useLanguage } from \"../../utils/useLanguage\";\nimport germany from \"../../assets/germany.svg\";\nimport usa from \"../../assets/usa.svg\";\n\nimport \"./Page.css\";\n\nexport const Main = ({ className, children, isDesktop, compact, loading }) => {\n  const { language } = useLanguage();\n  const handleLanguageChange = (event) => {\n    localStorage.setItem(\"lang\", event.target.value);\n    window.location.reload();\n  };\n\n  return (\n    <>\n      <main\n        className={classNames(\n          \"main\",\n          isDesktop ? \"main--desktop\" : \"main--mobile\",\n          compact && \"main--compact\",\n          className\n        )}\n      >\n        {children}\n        {loading && <Spinner />}\n      </main>\n      {!loading && (\n        <footer className=\"footer\">\n          <nav className=\"footer__navigation\">\n            <Link to=\"/about\">\n              <FormattedMessage id=\"footer.about\" />\n            </Link>\n            <Link to=\"/help\">\n              <FormattedMessage id=\"footer.help\" />\n            </Link>\n            <Link to=\"/datasets\">\n              <FormattedMessage id=\"footer.datasets\" />\n            </Link>\n            <Link to=\"/changelog\">\n              <FormattedMessage id=\"footer.changelog\" />\n            </Link>\n            <Link to=\"/privacy\">\n              <FormattedMessage id=\"footer.privacy\" />\n            </Link>\n          </nav>\n          <div className=\"footer__languages\">\n            <div className=\"radio\">\n              <input\n                type=\"radio\"\n                id=\"english\"\n                name=\"languages\"\n                value=\"en\"\n                onChange={handleLanguageChange}\n                defaultChecked={language === \"en\"}\n                className=\"radio__input\"\n              />\n              <label htmlFor=\"english\" className=\"radio__label\">\n                <img\n                  width=\"24\"\n                  alt=\"\"\n                  src={usa}\n                  className=\"footer__language-icon\"\n                />\n                English\n              </label>\n            </div>\n            <div className=\"radio\">\n              <input\n                type=\"radio\"\n                id=\"deutsch\"\n                name=\"languages\"\n                value=\"de\"\n                onChange={handleLanguageChange}\n                defaultChecked={language === \"de\"}\n                className=\"radio__input\"\n              />\n              <label htmlFor=\"deutsch\" className=\"radio__label\">\n                <img\n                  width=\"24\"\n                  alt=\"\"\n                  src={germany}\n                  className=\"footer__language-icon\"\n                />\n                Deutsch\n              </label>\n            </div>\n          </div>\n        </footer>\n      )}\n    </>\n  );\n};\n\nMain.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  isDesktop: PropTypes.bool,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nimport { useLanguage } from \"../../utils/useLanguage\";\n\nimport \"./Select.css\";\n\nexport const Select = ({\n  options,\n  className,\n  id,\n  name,\n  required,\n  selected,\n  disabled,\n  value,\n  onChange,\n  spaceTop,\n  spaceBottom,\n}) => {\n  const { language } = useLanguage();\n  const handleOnChange = (event) => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <select\n      id={id}\n      name={name}\n      required={required}\n      onChange={handleOnChange}\n      value={value}\n      defaultValue={selected}\n      disabled={disabled}\n      className={classNames(\n        \"select\",\n        spaceTop && \"select--spaceTop\",\n        spaceBottom && \"select--spaceBottom\",\n        className\n      )}\n    >\n      {options.map(({ name_de, name_en, id: optionValue }) => (\n        <option key={optionValue} value={optionValue}>\n          {language === \"de\" ? name_de : name_en}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nSelect.propTypes = {\n  options: PropTypes.array.isRequired,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  selected: PropTypes.string,\n  disabled: PropTypes.bool,\n  spaceBottom: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { Button } from \"../button\";\n\nimport \"./NumberInput.css\";\n\nexport const NumberInput = (props) => {\n  const intl = useIntl();\n  const handleOnUpClick = (event) => {\n    event.preventDefault();\n\n    props.onChange({\n      target: {\n        value: Number(props.value) + 1,\n        id: props.id,\n      },\n    });\n  };\n  const handleOnDownClick = (event) => {\n    event.preventDefault();\n\n    props.onChange({\n      target: {\n        value: Number(props.value) - 1,\n        id: props.id,\n      },\n    });\n  };\n\n  return (\n    <div className=\"number-input\">\n      <input {...props} type=\"number\" pattern=\"[0-9]*\" />\n      <Button\n        onClick={handleOnUpClick}\n        type=\"secondary\"\n        icon=\"up\"\n        label={intl.formatMessage({ id: \"misc.increase\" })}\n        disabled={props.value >= props.max && props.max !== 0}\n        className=\"number-input__button number-input__button--up\"\n      />\n      <Button\n        onClick={handleOnDownClick}\n        type=\"secondary\"\n        icon=\"down\"\n        label={intl.formatMessage({ id: \"misc.decrease\" })}\n        disabled={props.value <= props.min}\n        className=\"number-input__button number-input__button--down\"\n      />\n    </div>\n  );\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { getRandomId } from \"../utils/id\";\n\nexport const listsSlice = createSlice({\n  name: \"lists\",\n  initialState: [],\n  reducers: {\n    setLists: (state, { payload }) => {\n      return payload || [];\n    },\n    updateList: (state, { payload }) => {\n      const { listId, name, points, description } = payload;\n      const newValues = { name, points, description };\n\n      Object.keys(newValues).forEach((key) =>\n        newValues[key] === undefined ? delete newValues[key] : {}\n      );\n\n      return state.map((list) => {\n        const { id } = list;\n\n        if (listId === id) {\n          return {\n            ...list,\n            ...newValues,\n          };\n        }\n\n        return list;\n      });\n    },\n    deleteList: (state, { payload }) => {\n      return state.filter(({ id }) => id !== payload);\n    },\n    addUnit: (state, { payload }) => {\n      const { listId, type, unit } = payload;\n      const newUnit = {\n        ...unit,\n        strength: unit.minimum,\n      };\n\n      return state.map((list) => {\n        const { id } = list;\n\n        if (listId === id) {\n          return {\n            ...list,\n            [type]: [...list[type], newUnit],\n          };\n        }\n\n        return list;\n      });\n    },\n    duplicateUnit: (state, { payload }) => {\n      const { listId, type, unitId } = payload;\n      const unit = state\n        .find(({ id }) => id === listId)\n        [type].find(({ id }) => id === unitId);\n\n      return state.map((list) => {\n        const { id } = list;\n\n        if (listId === id) {\n          return {\n            ...list,\n            [type]: [\n              ...list[type],\n              { ...unit, id: `${unit.id.split(\".\")[0]}.${getRandomId()}` },\n            ],\n          };\n        }\n\n        return list;\n      });\n    },\n    editUnit: (state, { payload }) => {\n      const {\n        listId,\n        type,\n        strength,\n        unitId,\n        options,\n        equipment,\n        armor,\n        command,\n        mounts,\n        magic,\n        name,\n        detachments,\n      } = payload;\n      const newValues = {\n        strength,\n        options,\n        equipment,\n        armor,\n        command,\n        mounts,\n        magic,\n        detachments,\n        name_de: name,\n        name_en: name,\n      };\n      const unit = state\n        .find(({ id }) => id === listId)\n        [type].find(({ id }) => id === unitId);\n\n      Object.keys(newValues).forEach((key) =>\n        newValues[key] === undefined ? delete newValues[key] : {}\n      );\n\n      const newUnit = {\n        ...unit,\n        ...newValues,\n      };\n\n      return state.map((list) => {\n        const { id } = list;\n\n        if (listId === id) {\n          return {\n            ...list,\n            [type]: list[type].map((data) => {\n              if (data.id === unit.id) {\n                return newUnit;\n              }\n              return data;\n            }),\n          };\n        }\n\n        return list;\n      });\n    },\n    removeUnit: (state, { payload }) => {\n      const { listId, type, unitId } = payload;\n\n      return state.map((list) => {\n        const { id } = list;\n\n        if (listId === id) {\n          return {\n            ...list,\n            [type]: list[type].filter((data) => {\n              if (data.id === unitId) {\n                return false;\n              }\n              return true;\n            }),\n          };\n        }\n\n        return list;\n      });\n    },\n  },\n});\n\nexport const {\n  setLists,\n  addUnit,\n  editUnit,\n  removeUnit,\n  duplicateUnit,\n  updateList,\n  deleteList,\n  duplicateList,\n} = listsSlice.actions;\n\nexport default listsSlice.reducer;\n","export default __webpack_public_path__ + \"static/media/warhammer-fantasy.4a99fa99.png\";","export default __webpack_public_path__ + \"static/media/the-old-world.6310c52f.png\";","import { useState, useEffect, Fragment } from \"react\";\nimport { useLocation, Redirect } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nimport { Button } from \"../../components/button\";\nimport { getRandomId } from \"../../utils/id\";\nimport { Header, Main } from \"../../components/page\";\nimport { Select } from \"../../components/select\";\nimport { NumberInput } from \"../../components/number-input\";\nimport gameSystems from \"../../assets/armies.json\";\nimport { setLists } from \"../../state/lists\";\nimport warhammerFantasy from \"../../assets/warhammer-fantasy.png\";\nimport warhammerTheOldWorld from \"../../assets/the-old-world.png\";\n\nimport \"./NewList.css\";\n\nexport const NewList = ({ isMobile }) => {\n  const MainComponent = isMobile ? Main : Fragment;\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const lists = useSelector((state) => state.lists);\n  const [game, setGame] = useState(\"the-old-world\");\n  const [army, setArmy] = useState(\n    gameSystems.find(({ id }) => id === game).armies[0].id\n  );\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [points, setPoints] = useState(2000);\n  const [redirect, setRedirect] = useState(null);\n  const createList = () => {\n    const newId = getRandomId();\n    const newList = {\n      \"warhammer-fantasy\": {\n        name: name,\n        description: description,\n        game: game,\n        points: points,\n        army: army,\n        lords: [],\n        heroes: [],\n        core: [],\n        special: [],\n        rare: [],\n        id: newId,\n      },\n      \"the-old-world\": {\n        name: name,\n        description: description,\n        game: game,\n        points: points,\n        army: army,\n        characters: [],\n        core: [],\n        special: [],\n        rare: [],\n        mercenaries: [],\n        allies: [],\n        id: newId,\n      },\n    };\n    const newLists = [...lists, newList[game]];\n\n    localStorage.setItem(\"owb.lists\", JSON.stringify(newLists));\n    dispatch(setLists(newLists));\n\n    setRedirect(newId);\n  };\n  const handleSystemChange = (event) => {\n    setGame(event.target.value);\n    setArmy(\n      gameSystems.filter(({ id }) => id === event.target.value)[0].armies[0].id\n    );\n  };\n  const handleArmyChange = (value) => {\n    setArmy(value);\n  };\n  const handlePointsChange = (event) => {\n    setPoints(event.target.value);\n  };\n  const handleNameChange = (event) => {\n    setName(event.target.value);\n  };\n  const handleDescriptionChange = (event) => {\n    setDescription(event.target.value);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    createList();\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  return (\n    <>\n      {redirect && <Redirect to={`/editor/${redirect}`} />}\n\n      {isMobile && (\n        <Header to=\"/\" headline={intl.formatMessage({ id: \"new.title\" })} />\n      )}\n\n      <MainComponent>\n        {!isMobile && (\n          <Header\n            isSection\n            to=\"/\"\n            headline={intl.formatMessage({ id: \"new.title\" })}\n          />\n        )}\n        <form onSubmit={handleSubmit} className=\"new-list\">\n          {gameSystems.map(({ name, id }) => (\n            <div className=\"radio\" key={id}>\n              <input\n                type=\"radio\"\n                id={id}\n                name=\"new-list\"\n                value={id}\n                onChange={handleSystemChange}\n                checked={id === game}\n                className=\"radio__input\"\n                aria-label={name}\n              />\n              <label htmlFor={id} className=\"radio__label\">\n                {id === \"warhammer-fantasy\" && (\n                  <img height=\"20\" src={warhammerFantasy} alt={name} />\n                )}\n                {id === \"the-old-world\" && (\n                  <>\n                    <img height=\"35\" src={warhammerTheOldWorld} alt={name} />\n                    <p className=\"new-list__beta\">Beta</p>\n                  </>\n                )}\n              </label>\n            </div>\n          ))}\n          <label htmlFor=\"name\">\n            <FormattedMessage id=\"misc.name\" />\n          </label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            className=\"input\"\n            value={name}\n            onChange={handleNameChange}\n            autoComplete=\"off\"\n            required\n            maxLength=\"100\"\n          />\n          <label htmlFor=\"description\">\n            <FormattedMessage id=\"misc.description\" />\n          </label>\n          <input\n            type=\"text\"\n            id=\"description\"\n            className=\"input\"\n            value={description}\n            onChange={handleDescriptionChange}\n            autoComplete=\"off\"\n            maxLength=\"255\"\n          />\n          <label htmlFor=\"points\">\n            <FormattedMessage id=\"misc.points\" />\n          </label>\n          <NumberInput\n            id=\"points\"\n            className=\"input\"\n            min={0}\n            value={points}\n            onChange={handlePointsChange}\n            required\n          />\n          <label htmlFor=\"army\">\n            <FormattedMessage id=\"new.army\" />\n          </label>\n          <Select\n            id=\"army\"\n            options={gameSystems.filter(({ id }) => id === game)[0].armies}\n            onChange={handleArmyChange}\n            selected=\"empire-of-man\"\n            spaceBottom\n            required\n          />\n          <Button centered icon=\"add-list\" submitButton spaceBottom>\n            <FormattedMessage id=\"new.create\" />\n          </Button>\n        </form>\n      </MainComponent>\n    </>\n  );\n};\n","const rules = {\n  lords: { maxPercent: 25 },\n  heroes: { maxPercent: 25 },\n  characters: { maxPercent: 50 },\n  core: { minPercent: 25 },\n  special: {\n    maxPercent: 50,\n    maxSame: 3,\n    maxSameLarge: 6,\n  },\n  rare: {\n    maxPercent: 25,\n    maxSame: 2,\n    maxSameLarge: 4,\n  },\n  mercenaries: { maxPercent: 20 },\n  allies: { maxPercent: 25 },\n};\n\nexport const getMaxPercentData = ({ type, armyPoints, points }) => {\n  const maxPercent = rules[type].maxPercent;\n  const maxPoints = (armyPoints / 100) * maxPercent;\n\n  return {\n    points: Math.floor(maxPoints),\n    overLimit: points > maxPoints,\n    diff: points > maxPoints ? Math.ceil(points - maxPoints) : 0,\n  };\n};\n\nexport const getMinPercentData = ({ type, armyPoints, points }) => {\n  const minPercent = rules[type].minPercent;\n  const minPoints = (armyPoints / 100) * minPercent;\n\n  return {\n    points: Math.floor(minPoints),\n    overLimit: points <= minPoints,\n    diff: points <= minPoints ? Math.ceil(minPoints - points) : 0,\n  };\n};\n","import PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nimport \"./List.css\";\n\nexport const List = ({ to, onClick, children, className, active }) => {\n  const Component = to ? Link : \"button\";\n\n  return (\n    <li className={classNames(\"list\", active && \"list--active\", className)}>\n      <Component to={to} className=\"list__inner\" onClick={onClick}>\n        {children}\n      </Component>\n    </li>\n  );\n};\n\nList.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  onClick: PropTypes.func,\n  to: PropTypes.string,\n  active: PropTypes.bool,\n};\n","export const getAllOptions = (\n  { mounts, equipment, armor, options, command, magic, detachments },\n  { asString, noMagic } = {}\n) => {\n  const language = localStorage.getItem(\"lang\");\n  const allCommand = command\n    ? command\n        .filter(({ active }) => active)\n        .map(({ name_de, name_en }) => (language === \"de\" ? name_de : name_en))\n    : [];\n  const allEquipment = equipment\n    ? equipment\n        .filter(({ active }) => active)\n        .map(({ name_de, name_en }) => (language === \"de\" ? name_de : name_en))\n    : [];\n  const allArmor = armor\n    ? armor\n        .filter(({ active }) => active)\n        .map(({ name_de, name_en }) => (language === \"de\" ? name_de : name_en))\n    : [];\n  const allOptions = options\n    ? options\n        .filter(({ active }) => active)\n        .map(({ name_de, name_en }) => (language === \"de\" ? name_de : name_en))\n    : [];\n  const allStackableOptions = options\n    ? options\n        .filter(({ stackableCount }) => stackableCount > 0)\n        .map(\n          ({ name_de, name_en, stackableCount }) =>\n            `${stackableCount} ${language === \"de\" ? name_de : name_en}`\n        )\n    : [];\n  const allMounts = mounts\n    ? mounts\n        .filter(({ active }) => active)\n        .map(({ name_de, name_en }) => (language === \"de\" ? name_de : name_en))\n    : [];\n  const allMagicItems = magic?.items\n    ? magic.items.map(({ name_de, name_en }) =>\n        language === \"de\" ? name_de : name_en\n      )\n    : [];\n  const allDetachments = detachments\n    ? detachments\n        .filter(({ strength }) => strength > 0)\n        .map(\n          ({ name_de, name_en, strength }) =>\n            `${strength} ${language === \"de\" ? name_de : name_en}`\n        )\n    : [];\n  const allOptionsArray = [\n    ...allEquipment,\n    ...allArmor,\n    ...allOptions,\n    ...allStackableOptions,\n    ...allCommand,\n    ...allMounts,\n    ...(!noMagic ? allMagicItems : []),\n    ...allDetachments,\n  ];\n  const allOptionsString = allOptionsArray.join(\", \");\n\n  if (allOptionsString) {\n    if (asString) {\n      return allOptionsString;\n    }\n    return <p>{allOptionsString}</p>;\n  }\n  return null;\n};\n","export const getUnitPoints = (unit) => {\n  let unitPoints = 0;\n\n  if (unit.strength) {\n    unitPoints = unit.strength * unit.points;\n  } else {\n    unitPoints = unit.points;\n  }\n  if (unit.options) {\n    unit.options.forEach((option) => {\n      if (option.stackable) {\n        unitPoints +=\n          (option.stackableCount || option.minimum || 0) * option.points;\n      } else if (option.active && option.perModel) {\n        unitPoints += (unit.strength || 1) * option.points;\n      } else if (option.active) {\n        unitPoints += option.points;\n      }\n    });\n  }\n  if (unit.equipment) {\n    unit.equipment.forEach((option) => {\n      if (option.active && option.perModel) {\n        unitPoints += (unit.strength || 1) * option.points;\n      } else if (option.active) {\n        unitPoints += option.points;\n      }\n    });\n  }\n  if (unit.armor) {\n    unit.armor.forEach((option) => {\n      if (option.active && option.perModel) {\n        unitPoints += (unit.strength || 1) * option.points;\n      } else if (option.active) {\n        unitPoints += option.points;\n      }\n    });\n  }\n  if (unit.command) {\n    unit.command.forEach((option) => {\n      if (option.active) {\n        unitPoints += option.points;\n      }\n    });\n  }\n  if (unit.mounts) {\n    unit.mounts.forEach((option) => {\n      if (option.active) {\n        unitPoints += option.points;\n      }\n    });\n  }\n  if (unit?.magic?.items) {\n    unit.magic.items.forEach((option) => {\n      unitPoints += option.points;\n    });\n  }\n  if (unit.detachments) {\n    unit.detachments.forEach((detachment) => {\n      unitPoints += detachment.strength * detachment.points;\n    });\n  }\n\n  return unitPoints;\n};\n\nexport const getUnitMagicPoints = ({ unit, command }) => {\n  const commandIndex = Number(command);\n  let unitPoints = 0;\n\n  if (unit?.magic?.items) {\n    if (commandIndex >= 0) {\n      unit.magic.items.forEach((option) => {\n        if (option.command === commandIndex) {\n          unitPoints += option.points;\n        }\n      });\n    } else {\n      unit.magic.items.forEach((option) => {\n        unitPoints += option.points;\n      });\n    }\n  }\n\n  return unitPoints;\n};\n\nexport const getUnitCommandPoints = (items) => {\n  let commandPoints = 0;\n\n  if (items) {\n    items.forEach((option) => {\n      commandPoints += option.points;\n    });\n  }\n\n  return commandPoints;\n};\n\nexport const getPoints = ({ type, list }) => {\n  let points = 0;\n\n  list[type] &&\n    list[type].forEach((unit) => {\n      points += getUnitPoints(unit);\n    });\n\n  return points;\n};\n\nexport const getAllPoints = (list) => {\n  const lordsPoints = getPoints({ list, type: \"lords\" });\n  const heroesPoints = getPoints({ list, type: \"heroes\" });\n  const corePoints = getPoints({ list, type: \"core\" });\n  const specialPoints = getPoints({ list, type: \"special\" });\n  const rarePoints = getPoints({ list, type: \"rare\" });\n  const charactersPoints = getPoints({ list, type: \"characters\" });\n  const mercenariesPoints = getPoints({ list, type: \"mercenaries\" });\n  const alliesPoints = getPoints({ list, type: \"allies\" });\n\n  return (\n    lordsPoints +\n    heroesPoints +\n    corePoints +\n    specialPoints +\n    rarePoints +\n    charactersPoints +\n    mercenariesPoints +\n    alliesPoints\n  );\n};\n","export const updateList = (updatedList) => {\n  const localLists = JSON.parse(localStorage.getItem(\"owb.lists\"));\n  const updatedLists = localLists.map((list) => {\n    if (list.id === updatedList.id) {\n      return updatedList;\n    } else {\n      return list;\n    }\n  });\n\n  localStorage.setItem(\"owb.lists\", JSON.stringify(updatedLists));\n};\n\nexport const removeList = (listId) => {\n  const localLists = JSON.parse(localStorage.getItem(\"owb.lists\"));\n  const updatedLists = localLists.filter(({ id }) => listId !== id);\n\n  localStorage.setItem(\"owb.lists\", JSON.stringify(updatedLists));\n};\n","import { useEffect, useState, Fragment } from \"react\";\nimport { useParams, useLocation, Redirect } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport classNames from \"classnames\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { getMaxPercentData, getMinPercentData } from \"../../utils/rules\";\nimport { Button } from \"../../components/button\";\nimport { Icon } from \"../../components/icon\";\nimport { List } from \"../../components/list\";\nimport { Header, Main } from \"../../components/page\";\nimport { getAllOptions } from \"../../utils/unit\";\nimport { throttle } from \"../../utils/throttle\";\nimport { getUnitPoints, getPoints, getAllPoints } from \"../../utils/points\";\nimport { deleteList } from \"../../state/lists\";\nimport { useLanguage } from \"../../utils/useLanguage\";\nimport { removeList, updateList } from \"../../utils/list\";\n\nimport \"./Editor.css\";\n\nexport const Editor = ({ isMobile }) => {\n  const MainComponent = isMobile ? Main : Fragment;\n  const { listId } = useParams();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [redirect, setRedirect] = useState(false);\n  const location = useLocation();\n  const { language } = useLanguage();\n  // const errors = useSelector((state) => state.errors);\n  const list = useSelector((state) =>\n    state.lists.find(({ id }) => listId === id)\n  );\n\n  const handleDelete = () => {\n    dispatch(deleteList(listId));\n    removeList(listId);\n    setRedirect(true);\n  };\n\n  useEffect(() => {\n    const onScroll = () => {\n      if (document.location.hash === `#${location.pathname}`) {\n        sessionStorage.setItem(\"scrollPosition\", window.pageYOffset);\n      }\n    };\n    window.addEventListener(\"scroll\", throttle(onScroll, 100));\n    window.scrollTo(0, Number(sessionStorage.getItem(\"scrollPosition\")) || 0);\n\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [location.pathname]);\n\n  useEffect(() => {\n    list && updateList(list);\n  }, [list]);\n\n  if (redirect) {\n    return <Redirect to=\"/\" />;\n  }\n\n  if (!list) {\n    if (isMobile) {\n      return (\n        <>\n          <Header to=\"/\" />\n          <Main loading />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <Header to=\"/\" isSection />\n          <Main loading />\n        </>\n      );\n    }\n  }\n\n  const allPoints = getAllPoints(list);\n  const lordsPoints = getPoints({ list, type: \"lords\" });\n  const heroesPoints = getPoints({ list, type: \"heroes\" });\n  const charactersPoints = getPoints({ list, type: \"characters\" });\n  const corePoints = getPoints({ list, type: \"core\" });\n  const specialPoints = getPoints({ list, type: \"special\" });\n  const rarePoints = getPoints({ list, type: \"rare\" });\n  const mercenariesPoints = getPoints({ list, type: \"mercenaries\" });\n  const alliesPoints = getPoints({ list, type: \"allies\" });\n  const lordsData = getMaxPercentData({\n    type: \"lords\",\n    armyPoints: list.points,\n    points: lordsPoints,\n  });\n  const heroesData = getMaxPercentData({\n    type: \"heroes\",\n    armyPoints: list.points,\n    points: heroesPoints,\n  });\n  const charactersData = getMaxPercentData({\n    type: \"characters\",\n    armyPoints: list.points,\n    points: charactersPoints,\n  });\n  const coreData = getMinPercentData({\n    type: \"core\",\n    armyPoints: list.points,\n    points: corePoints,\n  });\n  const specialData = getMaxPercentData({\n    type: \"special\",\n    armyPoints: list.points,\n    points: specialPoints,\n  });\n  const rareData = getMaxPercentData({\n    type: \"rare\",\n    armyPoints: list.points,\n    points: rarePoints,\n  });\n  const mercenariesData = getMaxPercentData({\n    type: \"mercenaries\",\n    armyPoints: list.points,\n    points: rarePoints,\n  });\n  const alliesData = getMaxPercentData({\n    type: \"allies\",\n    armyPoints: list.points,\n    points: rarePoints,\n  });\n  const moreButtons = [\n    {\n      name: intl.formatMessage({\n        id: \"misc.edit\",\n      }),\n      icon: \"edit\",\n      to: `/editor/${listId}/edit`,\n    },\n    {\n      name: intl.formatMessage({\n        id: \"misc.duplicate\",\n      }),\n      icon: \"duplicate\",\n      to: `/editor/${listId}/duplicate`,\n    },\n    {\n      name: intl.formatMessage({\n        id: \"misc.delete\",\n      }),\n      icon: \"delete\",\n      callback: handleDelete,\n    },\n    {\n      name: intl.formatMessage({\n        id: \"misc.export\",\n      }),\n      icon: \"export\",\n      to: `/editor/${listId}/export`,\n    },\n    {\n      name: intl.formatMessage({\n        id: \"misc.print\",\n      }),\n      icon: \"print\",\n      to: `/print/${listId}`,\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>{`Old World Builder | ${list?.name}`}</title>\n      </Helmet>\n\n      {isMobile && (\n        <Header\n          to=\"/\"\n          headline={list.name}\n          subheadline={\n            <>\n              <span\n                className={classNames(\n                  \"magic__header-points\",\n                  allPoints > list.points && \"magic__header-points--error\"\n                )}\n              >\n                {allPoints}&nbsp;\n              </span>\n              {`/ ${list.points} ${intl.formatMessage({\n                id: \"app.points\",\n              })}`}\n            </>\n          }\n          hasPointsError={allPoints > list.points}\n          moreButton={moreButtons}\n        />\n      )}\n\n      <MainComponent>\n        {!isMobile && (\n          <Header\n            isSection\n            to=\"/\"\n            headline={list.name}\n            subheadline={\n              <>\n                <span\n                  className={classNames(\n                    \"magic__header-points\",\n                    allPoints > list.points && \"magic__header-points--error\"\n                  )}\n                >\n                  {allPoints}&nbsp;\n                </span>\n                {`/ ${list.points} ${intl.formatMessage({\n                  id: \"app.points\",\n                })}`}\n              </>\n            }\n            hasPointsError={allPoints > list.points}\n            moreButton={moreButtons}\n          />\n        )}\n        {/* <section>\n          {errors.map((error) => (\n            <span>\n              <strong>{error}</strong>\n              <Icon symbol=\"error\" color=\"red\" />\n            </span>\n          ))}\n        </section> */}\n        {list.lords && (\n          <section className=\"editor__section\">\n            <header className=\"editor__header\">\n              <h2>\n                <FormattedMessage id=\"editor.lords\" />\n              </h2>\n              <p className=\"editor__points\">\n                {lordsData.diff > 0 ? (\n                  <>\n                    <strong>{lordsData.diff}</strong>\n                    <FormattedMessage id=\"editor.tooManyPoints\" />\n                    <Icon symbol=\"error\" color=\"red\" />\n                  </>\n                ) : (\n                  <>\n                    <strong>{lordsData.points - lordsPoints}</strong>\n                    <FormattedMessage id=\"editor.availablePoints\" />\n                    <Icon symbol=\"check\" />\n                  </>\n                )}\n              </p>\n            </header>\n            <ul>\n              {list.lords.map((unit, index) => (\n                <List\n                  key={index}\n                  to={`/editor/${listId}/lords/${unit.id}`}\n                  className=\"editor__list\"\n                  active={location.pathname.includes(unit.id)}\n                >\n                  <div className=\"editor__list-inner\">\n                    <b>{unit[`name_${language}`]}</b>\n                    <i>{`${getUnitPoints(unit)} ${intl.formatMessage({\n                      id: \"app.points\",\n                    })}`}</i>\n                  </div>\n                  {getAllOptions(unit)}\n                </List>\n              ))}\n            </ul>\n            <Button\n              centered\n              to={`/editor/${listId}/add/lords`}\n              icon=\"add\"\n              spaceTop\n            >\n              <FormattedMessage id=\"editor.add\" />\n            </Button>\n          </section>\n        )}\n\n        {list.heroes && (\n          <section className=\"editor__section\">\n            <header className=\"editor__header\">\n              <h2>\n                <FormattedMessage id=\"editor.heroes\" />\n              </h2>\n              <p className=\"editor__points\">\n                {heroesData.diff > 0 ? (\n                  <>\n                    <strong>{heroesData.diff}</strong>\n                    <FormattedMessage id=\"editor.tooManyPoints\" />\n                    <Icon symbol=\"error\" color=\"red\" />\n                  </>\n                ) : (\n                  <>\n                    <strong>{heroesData.points - heroesPoints}</strong>\n                    <FormattedMessage id=\"editor.availablePoints\" />\n                    <Icon symbol=\"check\" />\n                  </>\n                )}\n              </p>\n            </header>\n            <ul>\n              {list.heroes.map((unit, index) => (\n                <List\n                  key={index}\n                  to={`/editor/${listId}/heroes/${unit.id}`}\n                  className=\"editor__list\"\n                  active={location.pathname.includes(unit.id)}\n                >\n                  <div className=\"editor__list-inner\">\n                    <b>{unit[`name_${language}`]}</b>\n                    <i>{`${getUnitPoints(unit)} ${intl.formatMessage({\n                      id: \"app.points\",\n                    })}`}</i>\n                  </div>\n                  {getAllOptions(unit)}\n                </List>\n              ))}\n            </ul>\n            <Button\n              centered\n              to={`/editor/${listId}/add/heroes`}\n              icon=\"add\"\n              spaceTop\n            >\n              <FormattedMessage id=\"editor.add\" />\n            </Button>\n          </section>\n        )}\n\n        {list.characters && (\n          <section className=\"editor__section\">\n            <header className=\"editor__header\">\n              <h2>\n                <FormattedMessage id=\"editor.characters\" />\n              </h2>\n              <p className=\"editor__points\">\n                {charactersData.diff > 0 ? (\n                  <>\n                    <strong>{charactersData.diff}</strong>\n                    <FormattedMessage id=\"editor.tooManyPoints\" />\n                    <Icon symbol=\"error\" color=\"red\" />\n                  </>\n                ) : (\n                  <>\n                    <strong>{charactersData.points - charactersPoints}</strong>\n                    <FormattedMessage id=\"editor.availablePoints\" />\n                    <Icon symbol=\"check\" />\n                  </>\n                )}\n              </p>\n            </header>\n            <ul>\n              {list.characters.map((unit, index) => (\n                <List\n                  key={index}\n                  to={`/editor/${listId}/characters/${unit.id}`}\n                  className=\"editor__list\"\n                  active={location.pathname.includes(unit.id)}\n                >\n                  <div className=\"editor__list-inner\">\n                    <b>{unit[`name_${language}`]}</b>\n                    <i>{`${getUnitPoints(unit)} ${intl.formatMessage({\n                      id: \"app.points\",\n                    })}`}</i>\n                  </div>\n                  {getAllOptions(unit)}\n                </List>\n              ))}\n            </ul>\n            <Button\n              centered\n              to={`/editor/${listId}/add/characters`}\n              icon=\"add\"\n              spaceTop\n            >\n              <FormattedMessage id=\"editor.add\" />\n            </Button>\n          </section>\n        )}\n\n        <section className=\"editor__section\">\n          <header className=\"editor__header\">\n            <h2>\n              <FormattedMessage id=\"editor.core\" />\n            </h2>\n            <p className=\"editor__points\">\n              {coreData.diff > 0 ? (\n                <>\n                  <strong>{coreData.diff}</strong>\n                  <FormattedMessage id=\"editor.missingPoints\" />\n                  <Icon symbol=\"error\" color=\"red\" />\n                </>\n              ) : (\n                <>\n                  <strong>{corePoints}</strong>\n                  {` / ${coreData.points} `}\n                  <FormattedMessage id=\"app.points\" />\n                  <Icon symbol=\"check\" />\n                </>\n              )}\n            </p>\n          </header>\n          <ul>\n            {list.core.map((unit, index) => (\n              <List\n                key={index}\n                to={`/editor/${listId}/core/${unit.id}`}\n                className=\"editor__list\"\n                active={location.pathname.includes(unit.id)}\n              >\n                <div className=\"editor__list-inner\">\n                  {unit.strength || unit.minimum ? (\n                    <span>{`${unit.strength || unit.minimum}`}</span>\n                  ) : null}\n\n                  <b>{unit[`name_${language}`]}</b>\n                  <i>{`${getUnitPoints(unit)} ${intl.formatMessage({\n                    id: \"app.points\",\n                  })}`}</i>\n                </div>\n                {getAllOptions(unit)}\n              </List>\n            ))}\n          </ul>\n          <Button\n            centered\n            to={`/editor/${listId}/add/core`}\n            icon=\"add\"\n            spaceTop\n          >\n            <FormattedMessage id=\"editor.add\" />\n          </Button>\n        </section>\n\n        <section className=\"editor__section\">\n          <header className=\"editor__header\">\n            <h2>\n              <FormattedMessage id=\"editor.special\" />\n            </h2>\n            <p className=\"editor__points\">\n              {specialData.diff > 0 ? (\n                <>\n                  <strong>{specialData.diff}</strong>\n                  <FormattedMessage id=\"editor.tooManyPoints\" />\n                  <Icon symbol=\"error\" color=\"red\" />\n                </>\n              ) : (\n                <>\n                  <strong>{specialData.points - specialPoints}</strong>\n                  <FormattedMessage id=\"editor.availablePoints\" />\n                  <Icon symbol=\"check\" />\n                </>\n              )}\n            </p>\n          </header>\n          <ul>\n            {list.special.map((unit, index) => (\n              <List\n                key={index}\n                to={`/editor/${listId}/special/${unit.id}`}\n                className=\"editor__list\"\n                active={location.pathname.includes(unit.id)}\n              >\n                <div className=\"editor__list-inner\">\n                  {unit.strength || unit.minimum ? (\n                    <span>{`${unit.strength || unit.minimum}`}</span>\n                  ) : null}\n                  <b>{unit[`name_${language}`]}</b>\n                  <i>{`${getUnitPoints(unit)} ${intl.formatMessage({\n                    id: \"app.points\",\n                  })}`}</i>\n                </div>\n                {getAllOptions(unit)}\n              </List>\n            ))}\n          </ul>\n          <Button\n            centered\n            to={`/editor/${listId}/add/special`}\n            icon=\"add\"\n            spaceTop\n          >\n            <FormattedMessage id=\"editor.add\" />\n          </Button>\n        </section>\n\n        <section className=\"editor__section\">\n          <header className=\"editor__header\">\n            <h2>\n              <FormattedMessage id=\"editor.rare\" />\n            </h2>\n            <p className=\"editor__points\">\n              {rareData.diff > 0 ? (\n                <>\n                  <strong>{rareData.diff}</strong>\n                  <FormattedMessage id=\"editor.tooManyPoints\" />\n                  <Icon symbol=\"error\" color=\"red\" />\n                </>\n              ) : (\n                <>\n                  <strong>{rareData.points - rarePoints}</strong>\n                  <FormattedMessage id=\"editor.availablePoints\" />\n                  <Icon symbol=\"check\" />\n                </>\n              )}\n            </p>\n          </header>\n          <ul>\n            {list.rare.map((unit, index) => (\n              <List\n                key={index}\n                to={`/editor/${listId}/rare/${unit.id}`}\n                className=\"editor__list\"\n                active={location.pathname.includes(unit.id)}\n              >\n                <div className=\"editor__list-inner\">\n                  {unit.strength || unit.minimum ? (\n                    <span>{`${unit.strength || unit.minimum}`}</span>\n                  ) : null}\n                  <b>{unit[`name_${language}`]}</b>\n                  <i>{`${getUnitPoints(unit)} ${intl.formatMessage({\n                    id: \"app.points\",\n                  })}`}</i>\n                </div>\n                {getAllOptions(unit)}\n              </List>\n            ))}\n          </ul>\n          <Button\n            centered\n            to={`/editor/${listId}/add/rare`}\n            icon=\"add\"\n            spaceTop\n          >\n            <FormattedMessage id=\"editor.add\" />\n          </Button>\n        </section>\n\n        {list.mercenaries && (\n          <section className=\"editor__section\">\n            <header className=\"editor__header\">\n              <h2>\n                <FormattedMessage id=\"editor.mercenaries\" />\n              </h2>\n              <p className=\"editor__points\">\n                {mercenariesData.diff > 0 ? (\n                  <>\n                    <strong>{mercenariesData.diff}</strong>\n                    <FormattedMessage id=\"editor.tooManyPoints\" />\n                    <Icon symbol=\"error\" color=\"red\" />\n                  </>\n                ) : (\n                  <>\n                    <strong>\n                      {mercenariesData.points - mercenariesPoints}\n                    </strong>\n                    <FormattedMessage id=\"editor.availablePoints\" />\n                    <Icon symbol=\"check\" />\n                  </>\n                )}\n              </p>\n            </header>\n            <ul>\n              {list.mercenaries.map((unit, index) => (\n                <List\n                  key={index}\n                  to={`/editor/${listId}/mercenaries/${unit.id}`}\n                  className=\"editor__list\"\n                  active={location.pathname.includes(unit.id)}\n                >\n                  <div className=\"editor__list-inner\">\n                    <b>{unit[`name_${language}`]}</b>\n                    <i>{`${getUnitPoints(unit)} ${intl.formatMessage({\n                      id: \"app.points\",\n                    })}`}</i>\n                  </div>\n                  {getAllOptions(unit)}\n                </List>\n              ))}\n            </ul>\n            <p className=\"editor__soon\">Coming soon</p>\n            {/* <Button\n              centered\n              to={`/editor/${listId}/add/mercenaries`}\n              icon=\"add\"\n              spaceTop\n            >\n              <FormattedMessage id=\"editor.add\" />\n            </Button> */}\n          </section>\n        )}\n\n        {list.allies && (\n          <section className=\"editor__section\">\n            <header className=\"editor__header\">\n              <h2>\n                <FormattedMessage id=\"editor.allies\" />\n              </h2>\n              <p className=\"editor__points\">\n                {alliesData.diff > 0 ? (\n                  <>\n                    <strong>{alliesData.diff}</strong>\n                    <FormattedMessage id=\"editor.tooManyPoints\" />\n                    <Icon symbol=\"error\" color=\"red\" />\n                  </>\n                ) : (\n                  <>\n                    <strong>{alliesData.points - alliesPoints}</strong>\n                    <FormattedMessage id=\"editor.availablePoints\" />\n                    <Icon symbol=\"check\" />\n                  </>\n                )}\n              </p>\n            </header>\n            <ul>\n              {list.allies.map((unit, index) => (\n                <List\n                  key={index}\n                  to={`/editor/${listId}/allies/${unit.id}`}\n                  className=\"editor__list\"\n                  active={location.pathname.includes(unit.id)}\n                >\n                  <div className=\"editor__list-inner\">\n                    <b>{unit[`name_${language}`]}</b>\n                    <i>{`${getUnitPoints(unit)} ${intl.formatMessage({\n                      id: \"app.points\",\n                    })}`}</i>\n                  </div>\n                  {getAllOptions(unit)}\n                </List>\n              ))}\n            </ul>\n            <p className=\"editor__soon\">Coming soon</p>\n            {/* <Button\n              centered\n              to={`/editor/${listId}/add/allies`}\n              icon=\"add\"\n              spaceTop\n            >\n              <FormattedMessage id=\"editor.add\" />\n            </Button> */}\n          </section>\n        )}\n      </MainComponent>\n    </>\n  );\n};\n","export const throttle = (callback, limit) => {\n  let wait = false;\n\n  return () => {\n    if (!wait) {\n      callback.call();\n      wait = true;\n      setTimeout(() => {\n        wait = false;\n      }, limit);\n    }\n  };\n};\n","export default __webpack_public_path__ + \"static/media/the-empire.d3620178.svg\";","export default __webpack_public_path__ + \"static/media/dwarfs.d1515ee2.svg\";","export default __webpack_public_path__ + \"static/media/greenskins.ea460b46.svg\";","export default __webpack_public_path__ + \"static/media/beastmen.6a9fce0f.svg\";","export default __webpack_public_path__ + \"static/media/chaos-deamons.1f26ab65.svg\";","export default __webpack_public_path__ + \"static/media/chaos-warriors.95dbc8c2.svg\";","export default __webpack_public_path__ + \"static/media/dark-elves.9d17a9e4.svg\";","export default __webpack_public_path__ + \"static/media/high-elves.446a07c8.svg\";","export default __webpack_public_path__ + \"static/media/lizardmen.1864459d.svg\";","export default __webpack_public_path__ + \"static/media/ogres.8b76905b.svg\";","export default __webpack_public_path__ + \"static/media/skaven.76cb48b7.svg\";","export default __webpack_public_path__ + \"static/media/tomb-kings.9b30c541.svg\";","export default __webpack_public_path__ + \"static/media/vampire-counts.fd13d874.svg\";","export default __webpack_public_path__ + \"static/media/wood-elves.2b1066f8.svg\";","export default __webpack_public_path__ + \"static/media/chaos-dwarfs.ee5f1bd3.svg\";","export default __webpack_public_path__ + \"static/media/bretonnia.e5c3a1d0.svg\";","import { Fragment, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Button } from \"../../components/button\";\nimport { List } from \"../../components/list\";\nimport { Header, Main } from \"../../components/page\";\nimport { getAllPoints } from \"../../utils/points\";\nimport warhammerFantasy from \"../../assets/warhammer-fantasy.png\";\nimport warhammerTheOldWorld from \"../../assets/the-old-world.png\";\nimport theEmpire from \"../../assets/army-icons/the-empire.svg\";\nimport dwarfs from \"../../assets/army-icons/dwarfs.svg\";\nimport greenskins from \"../../assets/army-icons/greenskins.svg\";\nimport beastmen from \"../../assets/army-icons/beastmen.svg\";\nimport chaosDeamons from \"../../assets/army-icons/chaos-deamons.svg\";\nimport chaosWarriors from \"../../assets/army-icons/chaos-warriors.svg\";\nimport darkElves from \"../../assets/army-icons/dark-elves.svg\";\nimport highElves from \"../../assets/army-icons/high-elves.svg\";\nimport lizardmen from \"../../assets/army-icons/lizardmen.svg\";\nimport ogres from \"../../assets/army-icons/ogres.svg\";\nimport skaven from \"../../assets/army-icons/skaven.svg\";\nimport tombKings from \"../../assets/army-icons/tomb-kings.svg\";\nimport vampireCounts from \"../../assets/army-icons/vampire-counts.svg\";\nimport woodElves from \"../../assets/army-icons/wood-elves.svg\";\nimport chaosDwarfs from \"../../assets/army-icons/chaos-dwarfs.svg\";\nimport bretonnia from \"../../assets/army-icons/bretonnia.svg\";\n\nimport \"./Home.css\";\n\nconst armyIconMap = {\n  \"the-empire\": theEmpire,\n  dwarfs: dwarfs,\n  greenskins: greenskins,\n  \"empire-of-man\": theEmpire,\n  \"orc-and-goblin-tribes\": greenskins,\n  \"dwarfen-mountain-holds\": dwarfs,\n  \"warriors-of-chaos\": chaosWarriors,\n  \"kingdom-of-bretonnia\": bretonnia,\n  \"beastmen-brayherds\": beastmen,\n  \"wood-elf-realms\": woodElves,\n  \"tomb-kings-of-khemri\": tombKings,\n  \"high-elf-realms\": highElves,\n  \"dark-elves\": darkElves,\n  skaven: skaven,\n  \"vampire-counts\": vampireCounts,\n  \"daemons-of-chaos\": chaosDeamons,\n  \"ogre-kingdoms\": ogres,\n  lizardmen: lizardmen,\n  \"chaos-dwarfs\": chaosDwarfs,\n};\n\nexport const Home = ({ isMobile }) => {\n  const MainComponent = isMobile ? Main : Fragment;\n  const lists = useSelector((state) => state.lists);\n  const location = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          Old World Builder - Army builder for Warhammer Fantasy and Warhammer:\n          The Old World\n        </title>\n      </Helmet>\n\n      {isMobile && <Header headline=\"Old World Builder\" hasMainNavigation />}\n      <MainComponent>\n        {!lists.length && (\n          <>\n            <img\n              src={theEmpire}\n              alt=\"\"\n              width=\"100\"\n              height=\"100\"\n              className=\"home__logo\"\n            />\n            <i className=\"home__empty\">\n              <FormattedMessage id=\"home.empty\" />\n            </i>\n          </>\n        )}\n        <ul>\n          {lists.map(\n            ({ id, name, description, points, game, army, ...list }, index) => (\n              <List\n                key={index}\n                to={`/editor/${id}`}\n                active={location.pathname.includes(id)}\n              >\n                <span className=\"home__list-item\">\n                  <h2 className=\"home__headline\">{name}</h2>\n                  {description && (\n                    <p className=\"home__description\">{description}</p>\n                  )}\n                  <p className=\"home__points\">\n                    {getAllPoints({\n                      ...list,\n                      points,\n                    })}{\" \"}\n                    / {points} <FormattedMessage id=\"app.points\" />\n                  </p>\n                </span>\n                <div className=\"home__info\">\n                  <img\n                    width=\"70\"\n                    src={\n                      game === \"warhammer-fantasy\"\n                        ? warhammerFantasy\n                        : warhammerTheOldWorld\n                    }\n                    alt={\n                      game === \"warhammer-fantasy\"\n                        ? \"Warhammer Fantasy\"\n                        : \"Warhammer: The Old World\"\n                    }\n                    className=\"home__game\"\n                  />\n                  <img height=\"40\" width=\"40\" src={armyIconMap[army]} alt=\"\" />\n                </div>\n              </List>\n            )\n          )}\n        </ul>\n        <Button centered to=\"/new\" icon=\"new-list\" spaceTop spaceBottom>\n          <FormattedMessage id=\"home.newList\" />\n        </Button>\n      </MainComponent>\n    </>\n  );\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const itemsSlice = createSlice({\n  name: \"army\",\n  initialState: null,\n  reducers: {\n    setItems: (state, { payload }) => {\n      return payload;\n    },\n  },\n});\n\nexport const { setItems } = itemsSlice.actions;\n\nexport default itemsSlice.reducer;\n","export const nameMap = {\n  greenskins: {\n    name_de: \"Glitzakram\",\n    name_en: \"Shiny Stuff\",\n  },\n  \"the-empire\": {\n    name_de: \"Magische Erbstücke\",\n    name_en: \"Heirlooms of Magic\",\n  },\n  heirlooms: {\n    name_de: \"Erbstücke\",\n    name_en: \"Ancestral Heirlooms\",\n  },\n  dwarfs: {\n    name_de: \"Zwergenrunen\",\n    name_en: \"Runic Items\",\n  },\n  general: {\n    name_de: \"Magische Gegenstände\",\n    name_en: \"Magic Items\",\n  },\n  weapon: {\n    name_de: \"Magische Waffen\",\n    name_en: \"Magic Weapons\",\n  },\n  armor: {\n    name_de: \"Magische Rüstungen\",\n    name_en: \"Magic Armour\",\n  },\n  talisman: {\n    name_de: \"Talismane\",\n    name_en: \"Talismans\",\n  },\n  banner: {\n    name_de: \"Magische Standarten\",\n    name_en: \"Magic Standards\",\n  },\n  artifact: {\n    name_de: \"Arkane Artifakte\",\n    name_en: \"Arcane Items\",\n  },\n  \"enchanted-item\": {\n    name_de: \"Verzauberte Gegenstände\",\n    name_en: \"Enchanted Items\",\n  },\n  \"weapon-runes\": {\n    name_de: \"Waffenrunen\",\n    name_en: \"Weapon Runes\",\n  },\n  \"armor-runes\": {\n    name_de: \"Rüstungsrunen\",\n    name_en: \"Armour Runes\",\n  },\n  \"banner-runes\": {\n    name_de: \"Standartenrunen\",\n    name_en: \"Banner Runes\",\n  },\n  \"talismanic-runes\": {\n    name_de: \"Talismanrunen\",\n    name_en: \"Talismanic Runes\",\n  },\n  \"engineering-runes\": {\n    name_de: \"Maschinenrunen\",\n    name_en: \"Engineering Runes\",\n  },\n  triptych: {\n    name_de: \"Triptych\",\n    name_en: \"Triptych\",\n  },\n  \"kingdom-of-bretonnia\": {\n    name_de: \"Kingdom of Bretonnia\",\n    name_en: \"Kingdom of Bretonnia\",\n  },\n  \"chaos-mutations\": {\n    name_de: \"Chaos Mutations\",\n    name_en: \"Chaos Mutations\",\n  },\n  \"chaos-mutation\": {\n    name_de: \"Chaos Mutation\",\n    name_en: \"Chaos Mutation\",\n  },\n  \"gifts-of-chaos\": {\n    name_de: \"Gifts of Chaos\",\n    name_en: \"Gifts of Chaos\",\n  },\n  \"gift-of-chaos\": {\n    name_de: \"Gift of Chaos\",\n    name_en: \"Gift of Chaos\",\n  },\n  \"forest-spites\": {\n    name_de: \"Forest Spites\",\n    name_en: \"Forest Spites\",\n  },\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const armySlice = createSlice({\n  name: \"army\",\n  initialState: null,\n  reducers: {\n    setArmy: (state, { payload }) => {\n      return payload;\n    },\n  },\n});\n\nexport const { setArmy } = armySlice.actions;\n\nexport default armySlice.reducer;\n","import { useState, useEffect, Fragment } from \"react\";\nimport { useParams, useLocation, Redirect } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport classNames from \"classnames\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { fetcher } from \"../../utils/fetcher\";\nimport { getUnitPoints, getUnitCommandPoints } from \"../../utils/points\";\nimport { List } from \"../../components/list\";\nimport { NumberInput } from \"../../components/number-input\";\nimport { Icon } from \"../../components/icon\";\nimport { Header, Main } from \"../../components/page\";\nimport { Button } from \"../../components/button\";\nimport { nameMap } from \"../../pages/magic\";\nimport { editUnit, removeUnit, duplicateUnit } from \"../../state/lists\";\nimport { setArmy } from \"../../state/army\";\nimport { useLanguage } from \"../../utils/useLanguage\";\nimport { updateList } from \"../../utils/list\";\nimport { updateIds, getRandomId } from \"../../utils/id\";\n\nimport \"./Unit.css\";\n\nexport const Unit = ({ isMobile }) => {\n  const MainComponent = isMobile ? Main : Fragment;\n  const { listId, type, unitId } = useParams();\n  const dispatch = useDispatch();\n  const { language } = useLanguage();\n  const [redirect, setRedirect] = useState(null);\n  const location = useLocation();\n  const intl = useIntl();\n  const list = useSelector((state) =>\n    state.lists.find(({ id }) => listId === id)\n  );\n  const units = list ? list[type] : null;\n  const unit = units && units.find(({ id }) => id === unitId);\n  const army = useSelector((state) => state.army);\n  const detachments =\n    army && army.core.filter((coreUnit) => coreUnit.detachment);\n  let magicPoints = 0;\n  const handleRemove = (unitId) => {\n    dispatch(removeUnit({ listId, type, unitId }));\n    setRedirect(true);\n  };\n  const handleDuplicate = (unitId) => {\n    dispatch(duplicateUnit({ listId, type, unitId }));\n    setRedirect(true);\n  };\n  const handleStrengthChange = (event) => {\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        strength: event.target.value,\n      })\n    );\n  };\n  const handleStackableOptionChange = ({ id, stackableCount }) => {\n    const options = unit.options.map((option) => {\n      if (option.id === id) {\n        return {\n          ...option,\n          stackableCount,\n        };\n      }\n      return option;\n    });\n\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        options,\n      })\n    );\n  };\n  const handleAddDetachmentClick = ({ id }) => {\n    const detachment = detachments.find((detachment) => detachment.id === id);\n    const unitDetachments = unit.detachments ? [...unit.detachments] : [];\n\n    unitDetachments.push({\n      id: `${id}.${getRandomId()}`,\n      name_de: detachment.name_de,\n      name_en: detachment.name_en,\n      points: detachment.points,\n      strength: 5,\n    });\n\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        detachments: unitDetachments,\n      })\n    );\n  };\n  const handleDeleteDetachmentClick = ({ id }) => {\n    const unitDetachments = [...unit.detachments].filter(\n      (detachment) => detachment.id !== id\n    );\n\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        detachments: unitDetachments,\n      })\n    );\n  };\n  const handleDetachmentStrengthClick = ({ id, strength }) => {\n    const unitDetachments = [...unit.detachments].map((detachment) =>\n      detachment.id === id ? { ...detachment, strength } : detachment\n    );\n\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        detachments: unitDetachments,\n      })\n    );\n  };\n  const handleOptionsChange = (id) => {\n    const options = unit.options.map((option) => {\n      if (option.id === id) {\n        return {\n          ...option,\n          active: option.active ? false : true,\n        };\n      }\n      return option;\n    });\n\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        options,\n      })\n    );\n  };\n  const handleCommandChange = (id) => {\n    let magicItems = unit.magic?.items || [];\n    const command = unit.command.map((option, index) => {\n      if (option.id === id) {\n        // Also remove banner runes\n        if (option.active) {\n          magicItems = magicItems.filter(({ command }) => command !== index);\n        }\n\n        return {\n          ...option,\n          active: option.active ? false : true,\n        };\n      }\n      return option;\n    });\n\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        command,\n        magic: {\n          ...unit.magic,\n          items: magicItems,\n        },\n      })\n    );\n  };\n  const handleEquipmentChange = (id) => {\n    const equipment = unit.equipment.map((item) => ({\n      ...item,\n      active: item.id === id ? true : false,\n    }));\n\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        equipment,\n      })\n    );\n  };\n  const handleArmorChange = (id) => {\n    const armor = unit.armor.map((item) => ({\n      ...item,\n      active: item.id === id ? true : false,\n    }));\n\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        armor,\n      })\n    );\n  };\n  const handleMountsChange = (id) => {\n    const mounts = unit.mounts.map((item) => ({\n      ...item,\n      active: item.id === id ? true : false,\n    }));\n\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        mounts,\n      })\n    );\n  };\n\n  unit?.magic?.items &&\n    unit?.magic?.items.forEach((option) => {\n      magicPoints += option.points;\n    });\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  useEffect(() => {\n    list && updateList(list);\n  }, [list]);\n\n  useEffect(() => {\n    list &&\n      fetcher({\n        url: `games/${list.game}/${list.army}`,\n        onSuccess: (data) => {\n          dispatch(\n            setArmy({\n              lords: updateIds(data.lords),\n              heroes: updateIds(data.heroes),\n              characters: updateIds(data.characters),\n              core: updateIds(data.core),\n              special: updateIds(data.special),\n              rare: updateIds(data.rare),\n              mercenaries: updateIds(data.mercenaries),\n              allies: updateIds(data.allies),\n            })\n          );\n        },\n      });\n  }, [list, dispatch]);\n\n  if (redirect === true) {\n    return <Redirect to={`/editor/${listId}`} />;\n  }\n\n  if (!unit || !army) {\n    if (isMobile) {\n      return (\n        <>\n          <Header to={`/editor/${listId}`} />\n          <Main loading />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <Header to={`/editor/${listId}`} isSection />\n          <Main loading />\n        </>\n      );\n    }\n  }\n\n  const moreButtons = [\n    {\n      name: intl.formatMessage({\n        id: \"misc.rename\",\n      }),\n      icon: \"edit\",\n      to: `/editor/${listId}/${type}/${unit.id}/rename`,\n    },\n    {\n      name: intl.formatMessage({\n        id: \"misc.duplicate\",\n      }),\n      icon: \"duplicate\",\n      callback: () => handleDuplicate(unit.id),\n    },\n    {\n      name: intl.formatMessage({\n        id: \"misc.remove\",\n      }),\n      icon: \"delete\",\n      callback: () => handleRemove(unit.id),\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>{`Old World Builder | ${list?.name}`}</title>\n      </Helmet>\n\n      {isMobile && (\n        <Header\n          to={`/editor/${listId}`}\n          moreButton={moreButtons}\n          headline={unit[`name_${language}`]}\n          subheadline={`${getUnitPoints(unit)} ${intl.formatMessage({\n            id: \"app.points\",\n          })}`}\n        />\n      )}\n\n      <MainComponent>\n        {!isMobile && (\n          <Header\n            isSection\n            to={`/editor/${listId}`}\n            moreButton={moreButtons}\n            headline={unit[`name_${language}`]}\n            subheadline={`${getUnitPoints(unit)} ${intl.formatMessage({\n              id: \"app.points\",\n            })}`}\n          />\n        )}\n        {!unit.minimum &&\n          (!unit.command || (unit.command && !unit.command.length)) &&\n          (!unit.equipment || (unit.equipment && !unit.equipment.length)) &&\n          (!unit.armor || (unit.armor && !unit.armor.length)) &&\n          (!unit.mounts || (unit.mounts && !unit.mounts.length)) &&\n          (!unit.magic || (unit.magic && !unit.magic.maxPoints)) &&\n          (!unit.options || (unit.options && !unit.options.length)) && (\n            <i className=\"unit__empty\">\n              <FormattedMessage id=\"unit.noOptions\" />\n            </i>\n          )}\n        {unit.minimum ? (\n          <>\n            <label htmlFor=\"strength\" className=\"unit__strength\">\n              <FormattedMessage id=\"unit.unitSize\" />\n            </label>\n            <NumberInput\n              id=\"strength\"\n              className=\"input\"\n              min={unit.minimum}\n              max={unit.maximum}\n              value={unit.strength}\n              onChange={handleStrengthChange}\n            />\n          </>\n        ) : null}\n        {unit.command && unit.command.length > 0 && (\n          <>\n            <h2 className=\"unit__subline\">\n              <FormattedMessage id=\"unit.command\" />\n            </h2>\n            {unit.command.map(\n              (\n                {\n                  name_de,\n                  name_en,\n                  points,\n                  perModel,\n                  id,\n                  active = false,\n                  magic,\n                },\n                index\n              ) => {\n                let commandMagicPoints = 0;\n\n                if (unit.magic && unit.magic.items) {\n                  unit.magic.items\n                    .filter((item) => item.command === index)\n                    .forEach(({ points }) => {\n                      commandMagicPoints = commandMagicPoints + points;\n                    });\n                }\n\n                return (\n                  <Fragment key={id}>\n                    <div className=\"checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        id={`command-${id}`}\n                        value={id}\n                        onChange={() => handleCommandChange(id)}\n                        checked={active}\n                        className=\"checkbox__input\"\n                      />\n                      <label\n                        htmlFor={`command-${id}`}\n                        className=\"checkbox__label\"\n                      >\n                        {language === \"de\" ? name_de : name_en}\n                        <i className=\"checkbox__points\">\n                          {`${points} ${\n                            points === 1\n                              ? intl.formatMessage({\n                                  id: \"app.point\",\n                                })\n                              : intl.formatMessage({\n                                  id: \"app.points\",\n                                })\n                          }`}\n                          {perModel &&\n                            ` ${intl.formatMessage({\n                              id: \"unit.perModel\",\n                            })}`}\n                        </i>\n                      </label>\n                    </div>\n                    {magic?.maxPoints && active ? (\n                      <List\n                        to={`/editor/${listId}/${type}/${unitId}/magic/${index}`}\n                        className=\"editor__list unit__link\"\n                        active={location.pathname.includes(\"magic\")}\n                      >\n                        <div className=\"editor__list-inner\">\n                          <b>\n                            {magic.types\n                              .map((type) => nameMap[type][`name_${language}`])\n                              .join(\", \")}\n                          </b>\n                          <i className=\"checkbox__points\">\n                            <span\n                              className={classNames(\n                                commandMagicPoints >\n                                  unit.command[index].magic.maxPoints &&\n                                  \"editor__error\"\n                              )}\n                            >\n                              {getUnitCommandPoints(\n                                unit?.magic?.items.filter(\n                                  ({ command }) => command === index\n                                )\n                              )}\n                            </span>{\" \"}\n                            / {unit.command[index].magic.maxPoints}{\" \"}\n                            <FormattedMessage id=\"app.points\" />\n                          </i>\n                          {commandMagicPoints >\n                            unit.command[index].magic.maxPoints && (\n                            <Icon\n                              symbol=\"error\"\n                              color=\"red\"\n                              className=\"unit__magic-icon\"\n                            />\n                          )}\n                        </div>\n                        {unit?.magic?.items && (\n                          <p>\n                            {unit.magic.items\n                              .filter(({ command }) => command === index)\n                              .map(({ name_de, name_en }) =>\n                                language === \"de\" ? name_de : name_en\n                              )\n                              .join(\", \")}\n                          </p>\n                        )}\n                      </List>\n                    ) : null}\n                  </Fragment>\n                );\n              }\n            )}\n          </>\n        )}\n        {unit.equipment && unit.equipment.length > 0 && (\n          <>\n            <h2 className=\"unit__subline\">\n              <FormattedMessage id=\"unit.equipment\" />\n            </h2>\n            {unit.equipment.map(\n              ({ name_de, name_en, points, perModel, id, active = false }) => (\n                <div className=\"radio\" key={id}>\n                  <input\n                    type=\"radio\"\n                    id={`equipment-${id}`}\n                    name=\"equipment\"\n                    value={id}\n                    onChange={() => handleEquipmentChange(id)}\n                    checked={active}\n                    className=\"radio__input\"\n                  />\n                  <label htmlFor={`equipment-${id}`} className=\"radio__label\">\n                    {language === \"de\" ? name_de : name_en}\n                    <i className=\"checkbox__points\">\n                      {`${points} ${\n                        points === 1\n                          ? intl.formatMessage({\n                              id: \"app.point\",\n                            })\n                          : intl.formatMessage({\n                              id: \"app.points\",\n                            })\n                      }`}\n                      {perModel &&\n                        ` ${intl.formatMessage({\n                          id: \"unit.perModel\",\n                        })}`}\n                    </i>\n                  </label>\n                </div>\n              )\n            )}\n          </>\n        )}\n        {unit.armor && unit.armor.length > 0 && (\n          <>\n            <h2 className=\"unit__subline\">\n              <FormattedMessage id=\"unit.armor\" />\n            </h2>\n            {unit.armor.map(\n              ({ name_de, name_en, points, perModel, id, active = false }) => (\n                <div className=\"radio\" key={id}>\n                  <input\n                    type=\"radio\"\n                    id={`armor-${id}`}\n                    name=\"armor\"\n                    value={id}\n                    onChange={() => handleArmorChange(id)}\n                    checked={active}\n                    className=\"radio__input\"\n                  />\n                  <label htmlFor={`armor-${id}`} className=\"radio__label\">\n                    {language === \"de\" ? name_de : name_en}\n                    <i className=\"checkbox__points\">\n                      {`${points} ${\n                        points === 1\n                          ? intl.formatMessage({\n                              id: \"app.point\",\n                            })\n                          : intl.formatMessage({\n                              id: \"app.points\",\n                            })\n                      }`}\n                      {perModel &&\n                        ` ${intl.formatMessage({\n                          id: \"unit.perModel\",\n                        })}`}\n                    </i>\n                  </label>\n                </div>\n              )\n            )}\n          </>\n        )}\n        {unit.options && unit.options.length > 0 && (\n          <>\n            <h2 className=\"unit__subline\">\n              <FormattedMessage id=\"unit.options\" />\n            </h2>\n            {unit.options.map(\n              ({\n                name_de,\n                name_en,\n                points,\n                perModel,\n                id,\n                stackable,\n                maximum,\n                minimum = 0,\n                stackableCount = minimum || 0,\n                active = false,\n              }) =>\n                !stackable ? (\n                  <div className=\"checkbox\" key={id}>\n                    <input\n                      type=\"checkbox\"\n                      id={`options-${id}`}\n                      value={id}\n                      onChange={() => handleOptionsChange(id)}\n                      checked={active}\n                      className=\"checkbox__input\"\n                    />\n                    <label\n                      htmlFor={`options-${id}`}\n                      className=\"checkbox__label\"\n                    >\n                      {language === \"de\" ? name_de : name_en}\n                      <i className=\"checkbox__points\">\n                        {`${points} ${\n                          points === 1\n                            ? intl.formatMessage({\n                                id: \"app.point\",\n                              })\n                            : intl.formatMessage({\n                                id: \"app.points\",\n                              })\n                        }`}\n                        {perModel &&\n                          ` ${intl.formatMessage({\n                            id: \"unit.perModel\",\n                          })}`}\n                      </i>\n                    </label>\n                  </div>\n                ) : (\n                  <Fragment key={id}>\n                    <label\n                      htmlFor={`options-${id}`}\n                      className=\"unit__special-option\"\n                    >\n                      {language === \"de\" ? name_de : name_en}:\n                      <i className=\"checkbox__points\">\n                        {`${points} ${intl.formatMessage({\n                          id: \"app.points\",\n                        })} ${intl.formatMessage({\n                          id: \"unit.perModel\",\n                        })}`}\n                      </i>\n                    </label>\n                    <NumberInput\n                      id={`options-${id}`}\n                      className=\"input\"\n                      min={minimum}\n                      max={maximum}\n                      value={stackableCount}\n                      onChange={(event) =>\n                        handleStackableOptionChange({\n                          id,\n                          stackableCount: event.target.value,\n                        })\n                      }\n                    />\n                  </Fragment>\n                )\n            )}\n          </>\n        )}\n        {unit.regimentalUnit && (\n          <>\n            <h2 className=\"unit__subline unit__detachments-headline\">\n              <FormattedMessage id=\"unit.detachments\" />\n            </h2>\n            {detachments.map(({ name_de, name_en, id }) => (\n              <>\n                <div className=\"list\" key={id}>\n                  <div className=\"list__inner unit__detachments-header\">\n                    <b className=\"unit__magic-headline\">\n                      {language === \"de\" ? name_de : name_en}\n                    </b>\n                    <Button\n                      onClick={() =>\n                        handleAddDetachmentClick({\n                          id,\n                        })\n                      }\n                      type=\"secondary\"\n                      icon=\"add\"\n                      label={intl.formatMessage({ id: \"editor.add\" })}\n                      size=\"small\"\n                    />\n                  </div>\n                </div>\n                {unit.detachments &&\n                  unit.detachments\n                    .filter(\n                      (detachment) =>\n                        detachment.id.split(\".\")[0] === id.split(\".\")[0]\n                    )\n                    .map(({ name_de, name_en, strength, id, points }) => (\n                      <div className=\"list\" key={id}>\n                        <div className=\"list__inner unit__detachments\">\n                          <NumberInput\n                            id={`strength-${id}`}\n                            className=\"input\"\n                            min={5}\n                            value={strength}\n                            onChange={(event) =>\n                              handleDetachmentStrengthClick({\n                                id,\n                                strength: event.target.value,\n                              })\n                            }\n                          />\n                          <span>\n                            <b>{language === \"de\" ? name_de : name_en}</b>\n                            <i>{`${getUnitPoints({\n                              strength,\n                              points,\n                            })} ${intl.formatMessage({\n                              id: \"app.points\",\n                            })}`}</i>\n                          </span>\n                          <Button\n                            onClick={() =>\n                              handleDeleteDetachmentClick({\n                                id,\n                              })\n                            }\n                            type=\"secondary\"\n                            icon=\"close\"\n                            label={intl.formatMessage({ id: \"misc.remove\" })}\n                            size=\"small\"\n                          />\n                        </div>\n                      </div>\n                    ))}\n              </>\n            ))}\n          </>\n        )}\n        {unit.mounts && unit.mounts.length > 0 && (\n          <>\n            <h2 className=\"unit__subline\">\n              <FormattedMessage id=\"unit.mount\" />\n            </h2>\n            {unit.mounts.map(\n              ({ name_de, name_en, points, id, active = false }) => (\n                <div className=\"radio\" key={id}>\n                  <input\n                    type=\"radio\"\n                    id={`mounts-${id}`}\n                    name=\"mounts\"\n                    value={id}\n                    onChange={() => handleMountsChange(id)}\n                    checked={active}\n                    className=\"radio__input\"\n                  />\n                  <label htmlFor={`mounts-${id}`} className=\"radio__label\">\n                    {language === \"de\" ? name_de : name_en}\n                    <i className=\"checkbox__points\">{`${points} ${intl.formatMessage(\n                      {\n                        id: \"app.points\",\n                      }\n                    )}`}</i>\n                  </label>\n                </div>\n              )\n            )}\n          </>\n        )}\n        {unit.magic?.maxPoints ? (\n          <List\n            to={`/editor/${listId}/${type}/${unitId}/magic`}\n            className=\"editor__list unit__link\"\n            active={location.pathname.includes(\"magic\")}\n          >\n            <div className=\"editor__list-inner\">\n              <b className=\"unit__magic-headline\">\n                <FormattedMessage id=\"unit.magicItems\" />\n              </b>\n              <i className=\"checkbox__points\">\n                <span\n                  className={classNames(\n                    magicPoints > unit.magic.maxPoints && \"editor__error\"\n                  )}\n                >\n                  {magicPoints}\n                </span>{\" \"}\n                / {unit.magic.maxPoints} <FormattedMessage id=\"app.points\" />\n              </i>\n              {magicPoints > unit.magic.maxPoints && (\n                <Icon symbol=\"error\" color=\"red\" className=\"unit__magic-icon\" />\n              )}\n            </div>\n            {unit.magic.items && (\n              <p>\n                {unit.magic.items\n                  .map(({ name_de, name_en }) =>\n                    language === \"de\" ? name_de : name_en\n                  )\n                  .join(\", \")}\n              </p>\n            )}\n          </List>\n        ) : null}\n      </MainComponent>\n    </>\n  );\n};\n","import { Fragment, useEffect } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Header, Main } from \"../../components/page\";\nimport { NumberInput } from \"../../components/number-input\";\nimport { updateList } from \"../../state/lists\";\nimport { updateList as updateLocalList } from \"../../utils/list\";\n\nimport \"./EditList.css\";\n\nexport const EditList = ({ isMobile }) => {\n  const location = useLocation();\n  const intl = useIntl();\n  const MainComponent = isMobile ? Main : Fragment;\n  const { listId } = useParams();\n  const dispatch = useDispatch();\n  const list = useSelector((state) =>\n    state.lists.find(({ id }) => listId === id)\n  );\n\n  const handlePointsChange = (event) => {\n    dispatch(\n      updateList({\n        listId,\n        points: Number(event.target.value),\n      })\n    );\n  };\n  const handleNameChange = (event) => {\n    dispatch(\n      updateList({\n        listId,\n        name: event.target.value,\n      })\n    );\n  };\n  const handleDescriptionChange = (event) => {\n    dispatch(\n      updateList({\n        listId,\n        description: event.target.value,\n      })\n    );\n  };\n\n  useEffect(() => {\n    list && updateLocalList(list);\n  }, [list]);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  if (!list) {\n    return (\n      <>\n        <Header\n          to={`/editor/${listId}`}\n          headline={intl.formatMessage({\n            id: \"edit.title\",\n          })}\n        />\n        <Main />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{`Old World Builder | ${list?.name}`}</title>\n      </Helmet>\n\n      {isMobile && (\n        <Header\n          to={`/editor/${listId}`}\n          headline={intl.formatMessage({\n            id: \"edit.title\",\n          })}\n        />\n      )}\n\n      <MainComponent>\n        {!isMobile && (\n          <Header\n            isSection\n            to={`/editor/${listId}`}\n            headline={intl.formatMessage({\n              id: \"edit.title\",\n            })}\n          />\n        )}\n        <label htmlFor=\"name\" className=\"edit__label\">\n          <FormattedMessage id=\"misc.name\" />\n        </label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          className=\"input\"\n          value={list.name}\n          onChange={handleNameChange}\n          autoComplete=\"off\"\n          required\n          maxLength=\"100\"\n        />\n        <label htmlFor=\"description\" className=\"edit__label\">\n          <FormattedMessage id=\"misc.description\" />\n        </label>\n        <input\n          type=\"text\"\n          id=\"description\"\n          className=\"input\"\n          value={list.description}\n          onChange={handleDescriptionChange}\n          autoComplete=\"off\"\n          maxLength=\"255\"\n        />\n        <label htmlFor=\"points\">\n          <FormattedMessage id=\"misc.points\" />\n        </label>\n        <NumberInput\n          id=\"points\"\n          className=\"input\"\n          min={0}\n          value={list.points}\n          onChange={handlePointsChange}\n          required\n        />\n      </MainComponent>\n    </>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Header, Main } from \"../../components/page\";\nimport { Button } from \"../../components/button\";\n\nexport const About = () => {\n  const location = useLocation();\n  const intl = useIntl();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`Old World Builder | ${intl.formatMessage({ id: \"footer.about\" })}`}\n        </title>\n      </Helmet>\n\n      <Header headline=\"Old World Builder\" hasMainNavigation />\n\n      <Main compact>\n        <Button to=\"/\" icon=\"home\" centered>\n          <FormattedMessage id=\"misc.startpage\" />\n        </Button>\n\n        <h2 className=\"page-headline\">\n          <FormattedMessage id=\"about.title\" />\n        </h2>\n        <p>\n          <FormattedMessage\n            id=\"about.text\"\n            values={{\n              owb: <i>Old World Builder</i>,\n            }}\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"about.text2\"\n            values={{\n              github: (\n                <a\n                  href=\"https://github.com/nthiebes/old-world-builder\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  GitHub\n                </a>\n              ),\n            }}\n          />\n        </p>\n\n        <h2>\n          <FormattedMessage id=\"about.support\" />\n        </h2>\n        <p>\n          <FormattedMessage\n            id=\"about.text3\"\n            values={{\n              owb: <i>Old World Builder</i>,\n              datasets: <Link to=\"/datasets\">/datasets</Link>,\n              discord: (\n                <a\n                  href=\"https://discord.gg/87nUyjUxTU\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Discord\n                </a>\n              ),\n            }}\n          />\n        </p>\n\n        <h2>Credits</h2>\n        <p>\n          <FormattedMessage\n            id=\"about.credits\"\n            values={{\n              gameIcons: (\n                <a\n                  href=\"https://game-icons.net\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  game-icons.net\n                </a>\n              ),\n              license: (\n                <a\n                  href=\"https://creativecommons.org/licenses/by/3.0/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  CC BY 3.0\n                </a>\n              ),\n            }}\n          />\n        </p>\n        <p>\n          <b>\n            <FormattedMessage id=\"about.disclaimer\" />\n          </b>\n        </p>\n      </Main>\n    </>\n  );\n};\n","import { useState, useEffect, Fragment } from \"react\";\nimport { useParams, useLocation, Redirect } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useIntl } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { fetcher } from \"../../utils/fetcher\";\nimport { List } from \"../../components/list\";\nimport { Header, Main } from \"../../components/page\";\nimport { addUnit } from \"../../state/lists\";\nimport { setArmy } from \"../../state/army\";\nimport { getRandomId } from \"../../utils/id\";\nimport { useLanguage } from \"../../utils/useLanguage\";\nimport { updateIds } from \"../../utils/id\";\n\nexport const Add = ({ isMobile }) => {\n  const MainComponent = isMobile ? Main : Fragment;\n  const { listId, type } = useParams();\n  const dispatch = useDispatch();\n  const [redirect, setRedirect] = useState(null);\n  const intl = useIntl();\n  const location = useLocation();\n  const { language } = useLanguage();\n  const list = useSelector((state) =>\n    state.lists.find(({ id }) => listId === id)\n  );\n  const army = useSelector((state) => state.army);\n  const handleAdd = (unitId) => {\n    const unit = {\n      ...army[type].find(({ id }) => unitId === id),\n      id: `${unitId}.${getRandomId()}`,\n    };\n\n    dispatch(addUnit({ listId, type, unit }));\n    setRedirect(unit);\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  useEffect(() => {\n    list &&\n      fetcher({\n        url: `games/${list.game}/${list.army}`,\n        onSuccess: (data) => {\n          dispatch(\n            setArmy({\n              lords: updateIds(data.lords),\n              heroes: updateIds(data.heroes),\n              characters: updateIds(data.characters),\n              core: updateIds(data.core),\n              special: updateIds(data.special),\n              rare: updateIds(data.rare),\n              mercenaries: updateIds(data.mercenaries),\n              allies: updateIds(data.allies),\n            })\n          );\n        },\n      });\n  }, [list, dispatch]);\n\n  if (redirect) {\n    return <Redirect to={`/editor/${listId}/${type}/${redirect.id}`} />;\n  }\n\n  if (!army) {\n    if (isMobile) {\n      return (\n        <>\n          <Header to={`/editor/${listId}`} />\n          <Main loading />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <Header to={`/editor/${listId}`} isSection />\n          <Main loading />\n        </>\n      );\n    }\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{`Old World Builder | ${list?.name}`}</title>\n      </Helmet>\n\n      {isMobile && (\n        <Header\n          to={`/editor/${listId}`}\n          headline={intl.formatMessage({\n            id: \"add.title\",\n          })}\n        />\n      )}\n\n      <MainComponent>\n        {!isMobile && (\n          <Header\n            isSection\n            to={`/editor/${listId}`}\n            headline={intl.formatMessage({\n              id: \"add.title\",\n            })}\n          />\n        )}\n        <ul>\n          {army[type].map(({ name_de, name_en, id, minimum, points }) => (\n            <List key={id} onClick={() => handleAdd(id)}>\n              <span className=\"unit__name\">\n                {minimum ? `${minimum} ` : null}\n                <b>{language === \"de\" ? name_de : name_en}</b>\n              </span>\n              <i className=\"unit__points\">{`${\n                minimum ? points * minimum : points\n              } ${intl.formatMessage({\n                id: \"app.points\",\n              })}`}</i>\n            </List>\n          ))}\n        </ul>\n      </MainComponent>\n    </>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Header, Main } from \"../../components/page\";\nimport { Button } from \"../../components/button\";\n\nexport const Help = () => {\n  const location = useLocation();\n  const intl = useIntl();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`Old World Builder | ${intl.formatMessage({ id: \"footer.help\" })}`}\n        </title>\n      </Helmet>\n\n      <Header headline=\"Old World Builder\" hasMainNavigation />\n\n      <Main compact>\n        <Button to=\"/\" icon=\"home\" centered>\n          <FormattedMessage id=\"misc.startpage\" />\n        </Button>\n\n        <h2 className=\"page-headline\">\n          <FormattedMessage id=\"help.title\" />\n        </h2>\n        <p>\n          <FormattedMessage\n            id=\"help.text\"\n            values={{\n              github: (\n                <a\n                  href=\"https://github.com/nthiebes/old-world-builder\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  GitHub\n                </a>\n              ),\n              discord: (\n                <a\n                  href=\"https://discord.gg/87nUyjUxTU\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Discord\n                </a>\n              ),\n            }}\n          />\n        </p>\n      </Main>\n    </>\n  );\n};\n","import { useEffect, Fragment, useState } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Header, Main } from \"../../components/page\";\nimport { Button } from \"../../components/button\";\nimport { getAllOptions } from \"../../utils/unit\";\nimport { getUnitPoints, getPoints, getAllPoints } from \"../../utils/points\";\nimport { useLanguage } from \"../../utils/useLanguage\";\nimport gameSystems from \"../../assets/armies.json\";\n\nimport \"./Export.css\";\n\nconst getUnitsString = ({ units, isShowList, intl, language }) => {\n  return units\n    .map((unit) => {\n      const allOptions = getAllOptions(unit, {\n        asString: true,\n        noMagic: isShowList,\n      });\n\n      if (isShowList) {\n        return `${\n          unit.strength || unit.minimum\n            ? `${unit.strength || unit.minimum} `\n            : \"\"\n        }${unit[`name_${language}`]}\n${allOptions ? `- ${allOptions.split(\", \").join(\"\\n- \")}\\n` : \"\"}\n`;\n      }\n\n      return `${\n        unit.strength || unit.minimum ? `${unit.strength || unit.minimum} ` : \"\"\n      }${unit[`name_${language}`]} [${getUnitPoints(unit)} ${intl.formatMessage(\n        {\n          id: \"app.points\",\n        }\n      )}]\n${allOptions ? `- ${allOptions.split(\", \").join(\"\\n- \")}\\n` : \"\"}\n`;\n    })\n    .join(\"\");\n};\n\nconst getListAsText = ({ list, isShowList, intl, language }) => {\n  const allPoints = getAllPoints(list);\n  const lordsPoints = getPoints({ list, type: \"lords\" });\n  const heroesPoints = getPoints({ list, type: \"heroes\" });\n  const charactersPoints = getPoints({ list, type: \"characters\" });\n  const corePoints = getPoints({ list, type: \"core\" });\n  const specialPoints = getPoints({ list, type: \"special\" });\n  const rarePoints = getPoints({ list, type: \"rare\" });\n  const mercenariesPoints = getPoints({ list, type: \"mercenaries\" });\n  const alliesPoints = getPoints({ list, type: \"allies\" });\n  const game = gameSystems.find((game) => game.id === list.game);\n  const armyName = game.armies.find((army) => army.id === list.army)[\n    `name_${language}`\n  ];\n\n  if (isShowList) {\n    if (list.game === \"the-old-world\") {\n      // prettier-ignore\n      return `===\n${list.name}\n${game.name}, ${armyName}\n===\n\n++ ${intl.formatMessage({\n  id: \"editor.characters\",\n})} ++\n\n${getUnitsString({ units: list.characters, isShowList, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.core\",\n})} ++\n\n${getUnitsString({ units: list.core, isShowList, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.special\",\n})} ++\n\n${getUnitsString({ units: list.special, isShowList, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.rare\",\n})} ++\n\n${getUnitsString({ units: list.rare, isShowList, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.mercenaries\",\n})} ++\n\n${getUnitsString({ units: list.mercenaries, isShowList, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.allies\",\n})} ++\n\n${getUnitsString({ units: list.allies, isShowList, intl, language })}\n\n---\n${intl.formatMessage({\nid: \"export.createdWith\",\n})} \"Old World Builder\"\n\n[https://old-world-builder.com]`;\n    } else {\n      // Warhammer fantasy\n      // prettier-ignore\n      return `===\n${list.name}\n${game.name}, ${armyName}\n===\n\n++ ${intl.formatMessage({\n  id: \"editor.lords\",\n})} ++\n\n${getUnitsString({ units: list.lords, isShowList, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.heroes\",\n})} ++\n\n${getUnitsString({ units: list.heroes, isShowList, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.core\",\n})} ++\n\n${getUnitsString({ units: list.core, isShowList, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.special\",\n})} ++\n\n${getUnitsString({ units: list.special, isShowList, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.rare\",\n})} ++\n\n${getUnitsString({ units: list.rare, isShowList, intl, language })}\n\n---\n${intl.formatMessage({\n  id: \"export.createdWith\",\n})} \"Old World Builder\"\n\n[https://old-world-builder.com]`;\n    }\n  } else {\n    if (list.game === \"the-old-world\") {\n      // prettier-ignore\n      return `===\n${list.name} [${allPoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}]\n${game.name}, ${armyName}\n===\n\n++ ${intl.formatMessage({\n  id: \"editor.characters\",\n})} [${charactersPoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.characters, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.core\",\n})} [${corePoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.core, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.special\",\n})} [${specialPoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.special, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.rare\",\n})} [${rarePoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.rare, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.mercenaries\",\n})} [${mercenariesPoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.mercenaries, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.allies\",\n})} [${alliesPoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.allies, intl, language })}\n\n---\n${intl.formatMessage({\n  id: \"export.createdWith\",\n})} \"Old World Builder\"\n\n[https://old-world-builder.com]`;\n    } else {\n      // Warhammer fantasy\n      // prettier-ignore\n      return `===\n${list.name} [${allPoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}]\n${game.name}, ${armyName}\n===\n\n++ ${intl.formatMessage({\n  id: \"editor.lords\",\n})} [${lordsPoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.lords, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.heroes\",\n})} [${heroesPoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.heroes, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.core\",\n})} [${corePoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.core, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.special\",\n})} [${specialPoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.special, intl, language })}\n++ ${intl.formatMessage({\n  id: \"editor.rare\",\n})} [${rarePoints} ${intl.formatMessage({\n  id: \"app.points\",\n})}] ++\n\n${getUnitsString({ units: list.rare, intl, language })}\n\n---\n${intl.formatMessage({\n  id: \"export.createdWith\",\n})} \"Old World Builder\"\n\n[https://old-world-builder.com]`;\n    }\n  }\n};\n\nexport const Export = ({ isMobile }) => {\n  const MainComponent = isMobile ? Main : Fragment;\n  const intl = useIntl();\n  const location = useLocation();\n  const { language } = useLanguage();\n  const [copied, setCopied] = useState(false);\n  const [copyError, setCopyError] = useState(false);\n  const [isShowList, setIsShowList] = useState(false);\n  const { listId } = useParams();\n  const list = useSelector((state) =>\n    state.lists.find(({ id }) => listId === id)\n  );\n  const listText = list\n    ? getListAsText({ list, isShowList, intl, language })\n    : \"\";\n  const copyText = () => {\n    navigator.clipboard &&\n      navigator.clipboard.writeText(listText).then(\n        () => {\n          setCopied(true);\n        },\n        () => {\n          setCopyError(true);\n        }\n      );\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  if (!list) {\n    return null;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{`Old World Builder | ${list?.name}`}</title>\n      </Helmet>\n\n      {isMobile && (\n        <Header\n          to={`/editor/${listId}`}\n          headline={intl.formatMessage({\n            id: \"export.title\",\n          })}\n        />\n      )}\n\n      <MainComponent>\n        {!isMobile && (\n          <Header\n            isSection\n            to={`/editor/${listId}`}\n            headline={intl.formatMessage({\n              id: \"export.title\",\n            })}\n          />\n        )}\n        <Button\n          icon={copied ? \"check\" : \"copy\"}\n          centered\n          spaceTop\n          spaceBottom\n          onClick={copyText}\n        >\n          {copied\n            ? intl.formatMessage({\n                id: \"export.copied\",\n              })\n            : intl.formatMessage({\n                id: \"export.copy\",\n              })}\n        </Button>\n        {copyError && (\n          <p className=\"export__error\">\n            <FormattedMessage id=\"export.error\" />\n          </p>\n        )}\n\n        <div className=\"checkbox export__visible-checkbox\">\n          <input\n            type=\"checkbox\"\n            id=\"show\"\n            onChange={() => setIsShowList(!isShowList)}\n            checked={isShowList}\n            className=\"checkbox__input\"\n          />\n          <label htmlFor=\"show\" className=\"checkbox__label\">\n            <FormattedMessage id=\"export.visibleList\" />\n          </label>\n        </div>\n        <p className=\"export__visible-description\">\n          <i>\n            (<FormattedMessage id=\"export.visibleListDescription\" />)\n          </i>\n        </p>\n\n        <textarea className=\"export__text\" value={listText} readOnly />\n      </MainComponent>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { Button } from \"../../components/button\";\nimport { getAllOptions } from \"../../utils/unit\";\nimport { getUnitPoints, getPoints, getAllPoints } from \"../../utils/points\";\nimport { useLanguage } from \"../../utils/useLanguage\";\nimport gameSystems from \"../../assets/armies.json\";\n\nimport \"./Print.css\";\n\nexport const Print = () => {\n  const { listId } = useParams();\n  const { language } = useLanguage();\n  const [isPrinting, setIsPrinting] = useState(false);\n  const [isShowList, setIsShowList] = useState(false);\n  const list = useSelector((state) =>\n    state.lists.find(({ id }) => listId === id)\n  );\n\n  if (!list) {\n    return null;\n  }\n\n  const allPoints = getAllPoints(list);\n  const lordsPoints = getPoints({ list, type: \"lords\" });\n  const heroesPoints = getPoints({ list, type: \"heroes\" });\n  const charactersPoints = getPoints({ list, type: \"characters\" });\n  const corePoints = getPoints({ list, type: \"core\" });\n  const specialPoints = getPoints({ list, type: \"special\" });\n  const rarePoints = getPoints({ list, type: \"rare\" });\n  const mercenariesPoints = getPoints({ list, type: \"mercenaries\" });\n  const alliesPoints = getPoints({ list, type: \"allies\" });\n  const game = gameSystems.find((game) => game.id === list.game);\n  const armyName = game.armies.find((army) => army.id === list.army)[\n    `name_${language}`\n  ];\n  const handlePrintClick = () => {\n    setIsPrinting(true);\n    document.title = `${list.name} - Old World Builder`;\n    window.onafterprint = () => {\n      document.title = \"Old World Builder\";\n      setIsPrinting(false);\n    };\n    window.print();\n  };\n\n  return (\n    <>\n      <div className=\"hide-for-printing\">\n        <Button\n          to={`/editor/${listId}`}\n          centered\n          icon=\"back\"\n          spaceTop\n          spaceBottom\n        >\n          <FormattedMessage id=\"header.back\" />\n        </Button>\n        {isPrinting ? (\n          <p className=\"print-info\">\n            <FormattedMessage id=\"print.printing\" />\n          </p>\n        ) : (\n          <>\n            <div className=\"checkbox print-checkbox\">\n              <input\n                type=\"checkbox\"\n                id=\"show\"\n                onChange={() => setIsShowList(!isShowList)}\n                checked={isShowList}\n                className=\"checkbox__input\"\n              />\n              <label htmlFor=\"show\" className=\"checkbox__label\">\n                <FormattedMessage id=\"export.visibleList\" />\n              </label>\n            </div>\n            <p className=\"print-checkbox-description\">\n              <i>\n                (<FormattedMessage id=\"export.visibleListDescription\" />)\n              </i>\n            </p>\n            <Button\n              onClick={handlePrintClick}\n              centered\n              icon=\"print\"\n              spaceTop\n              spaceBottom\n            >\n              <FormattedMessage id=\"misc.print\" />\n            </Button>\n          </>\n        )}\n      </div>\n\n      <main className=\"print\">\n        <h1>\n          {list.name}{\" \"}\n          {!isShowList && (\n            <span className=\"print__points\">\n              [{allPoints} <FormattedMessage id=\"app.points\" />]\n            </span>\n          )}\n        </h1>\n        <p className=\"print__subheader\">\n          {game.name}, {armyName}\n        </p>\n\n        {list.game === \"the-old-world\" ? (\n          <section>\n            <h2>\n              <FormattedMessage id=\"editor.characters\" />{\" \"}\n              {!isShowList && (\n                <span className=\"print__points\">\n                  [{charactersPoints} <FormattedMessage id=\"app.points\" />]\n                </span>\n              )}\n            </h2>\n            <ul>\n              {list.characters.map((unit) => (\n                <li key={unit.id}>\n                  <h3>\n                    {language === \"de\" ? unit.name_de : unit.name_en}\n                    {!isShowList && (\n                      <span className=\"print__points\">\n                        [{getUnitPoints(unit)}{\" \"}\n                        <FormattedMessage id=\"app.points\" />]\n                      </span>\n                    )}\n                  </h3>\n                  {getAllOptions(unit)}\n                </li>\n              ))}\n            </ul>\n          </section>\n        ) : (\n          <>\n            <section>\n              <h2>\n                <FormattedMessage id=\"editor.lords\" />{\" \"}\n                {!isShowList && (\n                  <span className=\"print__points\">\n                    [{lordsPoints} <FormattedMessage id=\"app.points\" />]\n                  </span>\n                )}\n              </h2>\n              <ul>\n                {list.lords.map((unit) => (\n                  <li key={unit.id}>\n                    <h3>\n                      {language === \"de\" ? unit.name_de : unit.name_en}\n                      {!isShowList && (\n                        <span className=\"print__points\">\n                          [{getUnitPoints(unit)}{\" \"}\n                          <FormattedMessage id=\"app.points\" />]\n                        </span>\n                      )}\n                    </h3>\n                    {getAllOptions(unit)}\n                  </li>\n                ))}\n              </ul>\n            </section>\n\n            <section>\n              <h2>\n                <FormattedMessage id=\"editor.heroes\" />{\" \"}\n                {!isShowList && (\n                  <span className=\"print__points\">\n                    [{heroesPoints} <FormattedMessage id=\"app.points\" />]\n                  </span>\n                )}\n              </h2>\n              <ul>\n                {list.heroes.map((unit) => (\n                  <li key={unit.id}>\n                    <h3>\n                      {language === \"de\" ? unit.name_de : unit.name_en}\n                      {!isShowList && (\n                        <span className=\"print__points\">\n                          [{getUnitPoints(unit)}{\" \"}\n                          <FormattedMessage id=\"app.points\" />]\n                        </span>\n                      )}\n                    </h3>\n                    {getAllOptions(unit)}\n                  </li>\n                ))}\n              </ul>\n            </section>\n          </>\n        )}\n\n        <section>\n          <h2>\n            <FormattedMessage id=\"editor.core\" />{\" \"}\n            {!isShowList && (\n              <span className=\"print__points\">\n                [{corePoints} <FormattedMessage id=\"app.points\" />]\n              </span>\n            )}\n          </h2>\n          <ul>\n            {list.core.map((unit) => (\n              <li key={unit.id}>\n                <h3>\n                  <span className=\"print__strength\">\n                    {(unit.strength || unit.minimum) &&\n                      `${unit.strength || unit.minimum} `}\n                  </span>\n                  {language === \"de\" ? unit.name_de : unit.name_en}\n                  {!isShowList && (\n                    <span className=\"print__points\">\n                      [{getUnitPoints(unit)}{\" \"}\n                      <FormattedMessage id=\"app.points\" />]\n                    </span>\n                  )}\n                </h3>\n                {getAllOptions(unit)}\n              </li>\n            ))}\n          </ul>\n        </section>\n\n        <section>\n          <h2>\n            <FormattedMessage id=\"editor.special\" />{\" \"}\n            {!isShowList && (\n              <span className=\"print__points\">\n                [{specialPoints} <FormattedMessage id=\"app.points\" />]\n              </span>\n            )}\n          </h2>\n          <ul>\n            {list.special.map((unit) => (\n              <li key={unit.id}>\n                <h3>\n                  <span className=\"print__strength\">\n                    {(unit.strength || unit.minimum) &&\n                      `${unit.strength || unit.minimum} `}\n                  </span>\n                  {language === \"de\" ? unit.name_de : unit.name_en}\n                  {!isShowList && (\n                    <span className=\"print__points\">\n                      [{getUnitPoints(unit)}{\" \"}\n                      <FormattedMessage id=\"app.points\" />]\n                    </span>\n                  )}\n                </h3>\n                {getAllOptions(unit)}\n              </li>\n            ))}\n          </ul>\n        </section>\n\n        <section>\n          <h2>\n            <FormattedMessage id=\"editor.rare\" />{\" \"}\n            {!isShowList && (\n              <span className=\"print__points\">\n                [{rarePoints} <FormattedMessage id=\"app.points\" />]\n              </span>\n            )}\n          </h2>\n          <ul>\n            {list.rare.map((unit) => (\n              <li key={unit.id}>\n                <h3>\n                  <span className=\"print__strength\">\n                    {(unit.strength || unit.minimum) &&\n                      `${unit.strength || unit.minimum} `}\n                  </span>\n                  {language === \"de\" ? unit.name_de : unit.name_en}\n                  {!isShowList && (\n                    <span className=\"print__points\">\n                      [{getUnitPoints(unit)}{\" \"}\n                      <FormattedMessage id=\"app.points\" />]\n                    </span>\n                  )}\n                </h3>\n                {getAllOptions(unit)}\n              </li>\n            ))}\n          </ul>\n        </section>\n\n        {list.game === \"the-old-world\" && (\n          <>\n            <section>\n              <h2>\n                <FormattedMessage id=\"editor.mercenaries\" />{\" \"}\n                {!isShowList && (\n                  <span className=\"print__points\">\n                    [{mercenariesPoints} <FormattedMessage id=\"app.points\" />]\n                  </span>\n                )}\n              </h2>\n              <ul>\n                {list.mercenaries.map((unit) => (\n                  <li key={unit.id}>\n                    <h3>\n                      <span className=\"print__strength\">\n                        {(unit.strength || unit.minimum) &&\n                          `${unit.strength || unit.minimum} `}\n                      </span>\n                      {language === \"de\" ? unit.name_de : unit.name_en}\n                      {!isShowList && (\n                        <span className=\"print__points\">\n                          [{getUnitPoints(unit)}{\" \"}\n                          <FormattedMessage id=\"app.points\" />]\n                        </span>\n                      )}\n                    </h3>\n                    {getAllOptions(unit)}\n                  </li>\n                ))}\n              </ul>\n            </section>\n\n            <section>\n              <h2>\n                <FormattedMessage id=\"editor.allies\" />{\" \"}\n                {!isShowList && (\n                  <span className=\"print__points\">\n                    [{alliesPoints} <FormattedMessage id=\"app.points\" />]\n                  </span>\n                )}\n              </h2>\n              <ul>\n                {list.allies.map((unit) => (\n                  <li key={unit.id}>\n                    <h3>\n                      <span className=\"print__strength\">\n                        {(unit.strength || unit.minimum) &&\n                          `${unit.strength || unit.minimum} `}\n                      </span>\n                      {language === \"de\" ? unit.name_de : unit.name_en}\n                      {!isShowList && (\n                        <span className=\"print__points\">\n                          [{getUnitPoints(unit)}{\" \"}\n                          <FormattedMessage id=\"app.points\" />]\n                        </span>\n                      )}\n                    </h3>\n                    {getAllOptions(unit)}\n                  </li>\n                ))}\n              </ul>\n            </section>\n          </>\n        )}\n      </main>\n\n      <footer className=\"print-footer\">\n        <p>\n          <FormattedMessage id=\"export.createdWith\" />{\" \"}\n          <b>\"Old World Builder\"</b>\n        </p>\n        <p>\n          [\n          <a href=\"https://old-world-builder.com\">\n            <i>old-world-builder.com</i>\n          </a>\n          ]\n        </p>\n      </footer>\n    </>\n  );\n};\n","import { Fragment, useEffect, useState } from \"react\";\nimport { useParams, useLocation, Redirect } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Button } from \"../../components/button\";\nimport { Header, Main } from \"../../components/page\";\nimport { NumberInput } from \"../../components/number-input\";\nimport { getRandomId } from \"../../utils/id\";\nimport { setLists } from \"../../state/lists\";\n\nimport \"./DuplicateList.css\";\n\nexport const DuplicateList = ({ isMobile }) => {\n  const location = useLocation();\n  const intl = useIntl();\n  const MainComponent = isMobile ? Main : Fragment;\n  const { listId } = useParams();\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [points, setPoints] = useState(2000);\n  const [description, setDescription] = useState(\"\");\n  const [redirect, setRedirect] = useState(null);\n  const lists = useSelector((state) => state.lists);\n  const list = useSelector((state) =>\n    state.lists.find(({ id }) => listId === id)\n  );\n\n  const handlePointsChange = (event) => {\n    setPoints(event.target.value);\n  };\n  const handleNameChange = (event) => {\n    setName(event.target.value);\n  };\n  const handleDescriptionChange = (event) => {\n    setDescription(event.target.value);\n  };\n  const handleSubmit = (event) => {\n    const newId = getRandomId();\n    const newLists = [\n      ...lists,\n      {\n        ...list,\n        name,\n        points,\n        description,\n        id: newId,\n      },\n    ];\n\n    event.preventDefault();\n\n    localStorage.setItem(\"owb.lists\", JSON.stringify(newLists));\n    dispatch(setLists(newLists));\n\n    setRedirect(newId);\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  useEffect(() => {\n    if (list) {\n      setName(\n        `${intl.formatMessage({\n          id: \"duplicate.copyOf\",\n        })} ${list?.name}`\n      );\n      setPoints(list.points);\n      setDescription(list.description);\n    }\n  }, [list, intl]);\n\n  if (!list) {\n    return (\n      <>\n        <Header\n          to={`/editor/${listId}`}\n          headline={intl.formatMessage({\n            id: \"duplicate.title\",\n          })}\n        />\n        <Main />\n      </>\n    );\n  }\n\n  return (\n    <>\n      {redirect && <Redirect to={`/editor/${redirect}`} />}\n\n      <Helmet>\n        <title>{`Old World Builder | ${list?.name}`}</title>\n      </Helmet>\n\n      {isMobile && (\n        <Header\n          to={`/editor/${listId}`}\n          headline={intl.formatMessage({\n            id: \"duplicate.title\",\n          })}\n        />\n      )}\n\n      <MainComponent>\n        {!isMobile && (\n          <Header\n            isSection\n            to={`/editor/${listId}`}\n            headline={intl.formatMessage({\n              id: \"duplicate.title\",\n            })}\n          />\n        )}\n        <form onSubmit={handleSubmit} className=\"duplicate\">\n          <label htmlFor=\"name\">\n            <FormattedMessage id=\"misc.name\" />\n          </label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            className=\"input\"\n            value={name}\n            onChange={handleNameChange}\n            autoComplete=\"off\"\n            required\n            maxLength=\"100\"\n          />\n          <label htmlFor=\"description\" className=\"edit__label\">\n            <FormattedMessage id=\"misc.description\" />\n          </label>\n          <input\n            type=\"text\"\n            id=\"description\"\n            className=\"input\"\n            value={description}\n            onChange={handleDescriptionChange}\n            autoComplete=\"off\"\n            maxLength=\"255\"\n          />\n          <label htmlFor=\"points\">\n            <FormattedMessage id=\"misc.points\" />\n          </label>\n          <NumberInput\n            id=\"points\"\n            className=\"input\"\n            min={0}\n            value={points}\n            onChange={handlePointsChange}\n            required\n          />\n          <Button centered icon=\"duplicate\" submitButton>\n            <FormattedMessage id=\"misc.duplicate\" />\n          </Button>\n        </form>\n      </MainComponent>\n    </>\n  );\n};\n","import { Fragment, useEffect } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Header, Main } from \"../../components/page\";\nimport { editUnit } from \"../../state/lists\";\nimport { updateList } from \"../../utils/list\";\nimport { useLanguage } from \"../../utils/useLanguage\";\n\nimport \"./Rename.css\";\n\nexport const Rename = ({ isMobile }) => {\n  const MainComponent = isMobile ? Main : Fragment;\n  const location = useLocation();\n  const intl = useIntl();\n  const { language } = useLanguage();\n  const { listId, type, unitId } = useParams();\n  const dispatch = useDispatch();\n  const list = useSelector((state) =>\n    state.lists.find(({ id }) => listId === id)\n  );\n  const units = list ? list[type] : null;\n  const unit = units && units.find(({ id }) => id === unitId);\n  const name = unit ? unit[language === \"de\" ? \"name_de\" : \"name_en\"] : \"\";\n\n  const handleNameChange = (event) => {\n    dispatch(\n      editUnit({\n        listId,\n        type,\n        unitId,\n        name: event.target.value,\n      })\n    );\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  useEffect(() => {\n    list && updateList(list);\n  }, [list]);\n\n  if (!list) {\n    return (\n      <>\n        <Header\n          to={`/editor/${listId}/${type}/${unitId}`}\n          headline={intl.formatMessage({\n            id: \"rename.title\",\n          })}\n        />\n        <Main />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{`Old World Builder | ${list?.name}`}</title>\n      </Helmet>\n\n      {isMobile && (\n        <Header\n          to={`/editor/${listId}/${type}/${unitId}`}\n          headline={intl.formatMessage({\n            id: \"rename.title\",\n          })}\n        />\n      )}\n\n      <MainComponent>\n        {!isMobile && (\n          <Header\n            isSection\n            to={`/editor/${listId}/${type}/${unitId}`}\n            headline={intl.formatMessage({\n              id: \"rename.title\",\n            })}\n          />\n        )}\n        <label htmlFor=\"name\" className=\"rename__label\">\n          <FormattedMessage id=\"misc.name\" />\n        </label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          className=\"input\"\n          value={name}\n          onChange={handleNameChange}\n          autoComplete=\"off\"\n          required\n          maxLength=\"100\"\n        />\n      </MainComponent>\n    </>\n  );\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nimport \"./Expandable.css\";\n\nexport const Expandable = ({\n  className,\n  headline,\n  children,\n  notBold,\n  open,\n  onClick,\n  noMargin,\n}) => (\n  <details\n    className={classNames(\n      \"expandable\",\n      noMargin && \"expandable--no-margin\",\n      className\n    )}\n    open={open}\n  >\n    <summary\n      className={classNames(\n        \"expandable__summary\",\n        notBold && \"expandable__summary--normal\"\n      )}\n      onClick={onClick}\n    >\n      {headline}\n    </summary>\n    {children}\n  </details>\n);\n\nExpandable.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  headline: PropTypes.node.isRequired,\n  open: PropTypes.bool,\n  onClick: PropTypes.func,\n  notBold: PropTypes.bool,\n};\n\nExpandable.defaultProps = {\n  open: false,\n  notBold: false,\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\nimport { HelmetProvider } from \"react-helmet-async\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport { App } from \"./App\";\nimport store from \"./store\";\n\nimport English from \"./i18n/en.json\";\nimport German from \"./i18n/de.json\";\n\nconst metaDescription = {\n  de: \"Armeebauer für Warhammer: The Old World und Warhammer Fantasy.\",\n  en: \"Army builder for Warhammer: The Old World and Warhammer Fantasy Battles.\",\n};\n\n// Language detection\nconst supportedLanguages = [\"en\", \"de\"];\nconst localStorageLanguage = localStorage.getItem(\"lang\");\nconst locale = (\n  localStorageLanguage ||\n  navigator.language ||\n  navigator.userLanguage\n).slice(0, 2);\nconst language = supportedLanguages.indexOf(locale) === -1 ? \"en\" : locale;\n\nlocalStorage.setItem(\"lang\", language);\ndocument.documentElement.setAttribute(\"lang\", language);\ndocument\n  .querySelector(\"meta[name=description]\")\n  .setAttribute(\"content\", metaDescription[language]);\n\nlet messages;\nif (language === \"de\") {\n  messages = German;\n} else {\n  messages = English;\n}\n\nReactDOM.render(\n  <IntlProvider locale={locale} messages={messages}>\n    <ReduxProvider store={store}>\n      <React.StrictMode>\n        <HelmetProvider>\n          <App />\n        </HelmetProvider>\n      </React.StrictMode>\n    </ReduxProvider>\n  </IntlProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nserviceWorkerRegistration.register();\n","import { useEffect, useState } from \"react\";\n\nimport { NumberInput } from \"../../components/number-input\";\nimport { Button } from \"../../components/button\";\nimport { Expandable } from \"../../components/expandable\";\n\nimport \"./Entity.css\";\n\nconst initialUnitState = {\n  name_en: \"\",\n  name_de: \"\",\n  id: \"\",\n  points: 1,\n  minimum: 0,\n  maximum: 0,\n  command: [],\n  equipment: [],\n  armor: [],\n  options: [],\n  mounts: [],\n  magic: {\n    types: [],\n    maxPoints: 0,\n  },\n};\nconst magicItemTypes = [\n  \"weapon\",\n  \"armor\",\n  \"talisman\",\n  \"banner\",\n  \"artifact\",\n  \"enchanted-item\",\n  \"triptych\",\n  \"chaos-mutation\",\n  \"gift-of-chaos\",\n];\nconst getRandomId = () =>\n  (Math.random().toString(36) + Math.random().toString(36)).replace(\n    /[^a-z]+/g,\n    \"\"\n  );\n\nexport const Entity = ({ onSubmit, type, unit: existingUnit }) => {\n  const randomId = getRandomId();\n  const [unit, setUnit] = useState(\n    existingUnit ? { ...initialUnitState, ...existingUnit } : initialUnitState\n  );\n  const handleSubmit = (event) => {\n    const isNew = !Boolean(existingUnit);\n\n    event.preventDefault();\n    onSubmit({\n      unit: {\n        ...unit,\n        id: isNew\n          ? unit.name_en.toLowerCase().replace(/ /g, \"-\").replace(/,/g, \"\")\n          : unit.id,\n      },\n      type,\n      isNew,\n    });\n    isNew && setUnit(initialUnitState);\n  };\n  const handleFieldChange = (event) => {\n    const id = event.target.id.split(\"-\")[0];\n\n    setUnit({\n      ...unit,\n      [id]:\n        event.target.type === \"number\"\n          ? Number(event.target.value)\n          : event.target.value,\n    });\n  };\n  const handleNameBlur = () => {\n    const isNew = !Boolean(existingUnit);\n\n    setUnit({\n      ...unit,\n      id: isNew\n        ? unit.name_en.toLowerCase().replace(/ /g, \"-\").replace(/,/g, \"\")\n        : unit.id,\n      name_de: !unit.name_de ? unit.name_en : unit.name_de,\n    });\n  };\n  const handleSecondLevelFieldChange = ({ key, field, value, index }) => {\n    const newEntries = unit[key].map((entry, entryIndex) => {\n      if (index === entryIndex) {\n        return {\n          ...entry,\n          [field]: value,\n        };\n      }\n      return entry;\n    });\n\n    setUnit({\n      ...unit,\n      [key]: newEntries,\n    });\n  };\n  const handleSecondLevelDelete = ({ index, key }) => {\n    setUnit({\n      ...unit,\n      [key]: unit[key].filter((_, entryIndex) => entryIndex !== index),\n    });\n  };\n  const handleSecondLevelNameBlur = ({ index, value, key }) => {\n    const newEntries = unit[key].map((entry, entryIndex) => {\n      if (entryIndex === index) {\n        return {\n          ...entry,\n          name_de: !entry.name_de ? value : entry.name_de,\n        };\n      }\n      return entry;\n    });\n\n    setUnit({\n      ...unit,\n      [key]: newEntries,\n    });\n  };\n  const handleCommandMagicChange = ({ value, item, index }) => {\n    const newCommandEntries = unit.command.map((command, commandIndex) => {\n      if (commandIndex === index) {\n        return {\n          ...command,\n          magic: {\n            ...command.magic,\n            types:\n              value === \"on\"\n                ? [...command.magic.types, item]\n                : command.magic.types.filter((name) => name !== item),\n          },\n        };\n      }\n      return command;\n    });\n\n    setUnit({\n      ...unit,\n      command: newCommandEntries,\n    });\n  };\n  const handleCommandMagicPointsChange = ({ value, index }) => {\n    const newCommandEntries = unit.command.map((command, commandIndex) => {\n      if (commandIndex === index) {\n        return {\n          ...command,\n          magic: {\n            ...command.magic,\n            maxPoints: value,\n          },\n        };\n      }\n      return command;\n    });\n\n    setUnit({\n      ...unit,\n      command: newCommandEntries,\n    });\n  };\n  const handleMagicChange = ({ value, item }) => {\n    setUnit({\n      ...unit,\n      magic: {\n        ...unit.magic,\n        types:\n          value === \"on\"\n            ? [...unit.magic.types, item]\n            : unit.magic.types.filter((name) => name !== item),\n      },\n    });\n  };\n  const handleMagicPointsChange = ({ value }) => {\n    setUnit({\n      ...unit,\n      magic: {\n        ...unit.magic,\n        maxPoints: value,\n      },\n    });\n  };\n  const handleNewCommand = () => {\n    setUnit({\n      ...unit,\n      command: [\n        ...unit.command,\n        {\n          name_en: \"\",\n          name_de: \"\",\n          points: 1,\n          magic: {\n            types: [],\n            maxPoints: 0,\n          },\n        },\n      ],\n    });\n  };\n  const handleNewEquipment = () => {\n    setUnit({\n      ...unit,\n      equipment: [\n        ...unit.equipment,\n        {\n          name_en: \"\",\n          name_de: \"\",\n          points: 1,\n          perModel: true,\n          active: false,\n        },\n      ],\n    });\n  };\n  const handleNewArmor = () => {\n    setUnit({\n      ...unit,\n      armor: [\n        ...unit.armor,\n        {\n          name_en: \"\",\n          name_de: \"\",\n          points: 1,\n          perModel: true,\n          active: false,\n        },\n      ],\n    });\n  };\n  const handleNewOption = () => {\n    setUnit({\n      ...unit,\n      options: [\n        ...unit.options,\n        {\n          name_en: \"\",\n          name_de: \"\",\n          points: 1,\n          perModel: true,\n          stackable: false,\n          minimum: 0,\n          maximum: 0,\n        },\n      ],\n    });\n  };\n  const handleNewMount = () => {\n    setUnit({\n      ...unit,\n      mounts: [\n        ...unit.mounts,\n        {\n          name_en: \"\",\n          name_de: \"\",\n          points: 1,\n          active: false,\n        },\n      ],\n    });\n  };\n\n  useEffect(() => {\n    setUnit(\n      existingUnit ? { ...initialUnitState, ...existingUnit } : initialUnitState\n    );\n  }, [existingUnit]);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={`name_en-${randomId}`}>Name English</label>\n      <input\n        type=\"text\"\n        id={`name_en-${randomId}`}\n        className=\"input\"\n        value={unit.name_en}\n        onChange={handleFieldChange}\n        autoComplete=\"off\"\n        required\n        onBlur={handleNameBlur}\n      />\n      <label htmlFor={`name_de-${randomId}`}>Name German</label>\n      <input\n        type=\"text\"\n        id={`name_de-${randomId}`}\n        className=\"input\"\n        value={unit.name_de}\n        onChange={handleFieldChange}\n        autoComplete=\"off\"\n        required\n      />\n      <label htmlFor={`id-${randomId}`} className=\"edit__label\">\n        ID\n      </label>\n      <input\n        type=\"text\"\n        id={`id-${randomId}`}\n        className=\"input\"\n        value={unit.id}\n        autoComplete=\"off\"\n        pattern=\"(([a-z]*-[a-z]*)|[a-z]*)*\"\n        disabled\n        readOnly\n        placeholder=\"Automatically filled\"\n        required\n      />\n      <label htmlFor={`points-${randomId}`}>Points per model</label>\n      <NumberInput\n        id={`points-${randomId}`}\n        className=\"input\"\n        min={1}\n        value={unit.points}\n        onChange={handleFieldChange}\n        required\n      />\n      {type !== \"characters\" && (\n        <>\n          <label htmlFor={`minimum-${randomId}`}>\n            Minimum number of models\n          </label>\n          <NumberInput\n            id={`minimum-${randomId}`}\n            className=\"input\"\n            min={0}\n            value={unit.minimum}\n            onChange={handleFieldChange}\n            required\n          />\n          <label htmlFor={`maximum-${randomId}`}>\n            Maximum number of models\n          </label>\n          <NumberInput\n            id={`maximum-${randomId}`}\n            className=\"input\"\n            min={0}\n            value={unit.maximum}\n            onChange={handleFieldChange}\n            required\n          />\n        </>\n      )}\n\n      {type !== \"characters\" && (\n        <>\n          <hr />\n          <h3>Command</h3>\n          <p className=\"datasets__paragraph\">\n            All command options are NOT mutually exclusive.\n          </p>\n          {unit.command.map((command, index) => (\n            <div className=\"entity__second-level\" key={index}>\n              <label htmlFor={`command-name_en${index}-${randomId}`}>\n                Name English\n              </label>\n              <input\n                type=\"text\"\n                id={`command-name_en${index}-${randomId}`}\n                className=\"input\"\n                value={command.name_en}\n                onChange={(event) =>\n                  handleSecondLevelFieldChange({\n                    index,\n                    key: \"command\",\n                    field: \"name_en\",\n                    value: event.target.value,\n                  })\n                }\n                onBlur={(event) =>\n                  handleSecondLevelNameBlur({\n                    index,\n                    key: \"command\",\n                    value: event.target.value,\n                  })\n                }\n                autoComplete=\"off\"\n                required\n              />\n              <label htmlFor={`command-name_de${index}-${randomId}`}>\n                Name German\n              </label>\n              <input\n                type=\"text\"\n                id={`command-name_de${index}-${randomId}`}\n                className=\"input\"\n                value={command.name_de}\n                onChange={(event) =>\n                  handleSecondLevelFieldChange({\n                    index,\n                    key: \"command\",\n                    field: \"name_de\",\n                    value: event.target.value,\n                  })\n                }\n                autoComplete=\"off\"\n                required\n              />\n              <label htmlFor={`command-points${index}-${randomId}`}>\n                Points\n              </label>\n              <NumberInput\n                id={`command-points${index}-${randomId}`}\n                className=\"input\"\n                value={command.points}\n                onChange={(event) =>\n                  handleSecondLevelFieldChange({\n                    index,\n                    key: \"command\",\n                    field: \"points\",\n                    value: Number(event.target.value),\n                  })\n                }\n                required\n              />\n              <Expandable headline=\"Allowed magic item categories\">\n                {magicItemTypes.map((item, itemIndex) => (\n                  <div className=\"checkbox\" key={item}>\n                    <input\n                      type=\"checkbox\"\n                      id={`${item}${itemIndex}-${randomId}`}\n                      onChange={(event) =>\n                        handleCommandMagicChange({\n                          index,\n                          value: command.magic.types.includes(item)\n                            ? \"off\"\n                            : \"on\",\n                          item,\n                        })\n                      }\n                      checked={command.magic.types.includes(item)}\n                      className=\"checkbox__input\"\n                    />\n                    <label\n                      htmlFor={`${item}${itemIndex}-${randomId}`}\n                      className=\"checkbox__label\"\n                    >\n                      {item}\n                    </label>\n                  </div>\n                ))}\n                <label htmlFor={`command-magic-points-${index}-${randomId}`}>\n                  Max. magic item points\n                </label>\n                <NumberInput\n                  id={`command-magic-points-${index}-${randomId}`}\n                  className=\"input\"\n                  min={0}\n                  value={command.magic.maxPoints}\n                  onChange={(event) =>\n                    handleCommandMagicPointsChange({\n                      index,\n                      value: Number(event.target.value),\n                    })\n                  }\n                />\n              </Expandable>\n              {existingUnit ? (\n                <Button\n                  type=\"text\"\n                  color=\"dark\"\n                  spaceBottom\n                  icon=\"delete\"\n                  onClick={() =>\n                    handleSecondLevelDelete({ index, key: \"command\" })\n                  }\n                >\n                  Remove entry\n                </Button>\n              ) : null}\n            </div>\n          ))}\n          <Button\n            type=\"secondary\"\n            icon=\"add\"\n            onClick={handleNewCommand}\n            spaceBottom\n            className=\"entity__second-level-button\"\n          >\n            New entry\n          </Button>\n        </>\n      )}\n\n      <hr />\n\n      <h3>Weapon</h3>\n      <p className=\"datasets__paragraph\">\n        All weapon options are mutually exclusive and please add a default\n        weapon.\n        <br />\n        <i>(e.g. \"Hand weapon\" or \"Great weapon\")</i>\n      </p>\n      {unit.equipment.map((equipment, index) => (\n        <div className=\"entity__second-level\" key={index}>\n          <label htmlFor={`equipment-name_en${index}-${randomId}`}>\n            Name English\n          </label>\n          <input\n            type=\"text\"\n            id={`equipment-name_en${index}-${randomId}`}\n            className=\"input\"\n            value={equipment.name_en}\n            onChange={(event) =>\n              handleSecondLevelFieldChange({\n                index,\n                key: \"equipment\",\n                field: \"name_en\",\n                value: event.target.value,\n              })\n            }\n            onBlur={(event) =>\n              handleSecondLevelNameBlur({\n                index,\n                key: \"equipment\",\n                value: event.target.value,\n              })\n            }\n            autoComplete=\"off\"\n            required\n          />\n          <label htmlFor={`equipment-name_de${index}-${randomId}`}>\n            Name German\n          </label>\n          <input\n            type=\"text\"\n            id={`equipment-name_de${index}-${randomId}`}\n            className=\"input\"\n            value={equipment.name_de}\n            onChange={(event) =>\n              handleSecondLevelFieldChange({\n                index,\n                key: \"equipment\",\n                field: \"name_de\",\n                value: event.target.value,\n              })\n            }\n            autoComplete=\"off\"\n            required\n          />\n          <label htmlFor={`equipment-points${index}-${randomId}`}>Points</label>\n          <NumberInput\n            id={`equipment-points${index}-${randomId}`}\n            className=\"input\"\n            value={equipment.points}\n            onChange={(event) =>\n              handleSecondLevelFieldChange({\n                index,\n                key: \"equipment\",\n                field: \"points\",\n                value: Number(event.target.value),\n              })\n            }\n            required\n          />\n          <div className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              id={`equipment-perModel${index}-${randomId}`}\n              onChange={() =>\n                handleSecondLevelFieldChange({\n                  index,\n                  key: \"equipment\",\n                  field: \"perModel\",\n                  value: !equipment.perModel,\n                })\n              }\n              checked={equipment.perModel}\n              className=\"checkbox__input\"\n            />\n            <label\n              htmlFor={`equipment-perModel${index}-${randomId}`}\n              className=\"checkbox__label\"\n            >\n              Points count for each model\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              id={`equipment-active${index}-${randomId}`}\n              onChange={() =>\n                handleSecondLevelFieldChange({\n                  index,\n                  key: \"equipment\",\n                  field: \"active\",\n                  value: !equipment.active,\n                })\n              }\n              checked={equipment.active}\n              className=\"checkbox__input\"\n            />\n            <label\n              htmlFor={`equipment-active${index}-${randomId}`}\n              className=\"checkbox__label\"\n            >\n              Selected by default\n            </label>\n          </div>\n          <p>\n            <i>(e.g. when \"Hand weapon\" is the default equipment)</i>\n          </p>\n          {existingUnit ? (\n            <Button\n              type=\"text\"\n              color=\"dark\"\n              spaceBottom\n              icon=\"delete\"\n              spaceTop\n              onClick={() =>\n                handleSecondLevelDelete({ index, key: \"equipment\" })\n              }\n            >\n              Remove entry\n            </Button>\n          ) : null}\n        </div>\n      ))}\n      <Button\n        type=\"secondary\"\n        icon=\"add\"\n        onClick={handleNewEquipment}\n        spaceBottom\n        className=\"entity__second-level-button\"\n      >\n        New weapon\n      </Button>\n\n      <hr />\n\n      <h3>Armor</h3>\n      <p className=\"datasets__paragraph\">\n        All armor options are mutually exclusive and please add a default armor.\n        <br />\n        <i>(e.g. \"Light armour\" or \"Heavy armour\")</i>\n      </p>\n      {unit.armor.map((armor, index) => (\n        <div className=\"entity__second-level\" key={index}>\n          <label htmlFor={`armor-name_en${index}-${randomId}`}>\n            Name English\n          </label>\n          <input\n            type=\"text\"\n            id={`armor-name_en${index}-${randomId}`}\n            className=\"input\"\n            value={armor.name_en}\n            onChange={(event) =>\n              handleSecondLevelFieldChange({\n                index,\n                key: \"armor\",\n                field: \"name_en\",\n                value: event.target.value,\n              })\n            }\n            onBlur={(event) =>\n              handleSecondLevelNameBlur({\n                index,\n                key: \"armor\",\n                value: event.target.value,\n              })\n            }\n            autoComplete=\"off\"\n            required\n          />\n          <label htmlFor={`armor-name_de${index}-${randomId}`}>\n            Name German\n          </label>\n          <input\n            type=\"text\"\n            id={`armor-name_de${index}-${randomId}`}\n            className=\"input\"\n            value={armor.name_de}\n            onChange={(event) =>\n              handleSecondLevelFieldChange({\n                index,\n                key: \"armor\",\n                field: \"name_de\",\n                value: event.target.value,\n              })\n            }\n            autoComplete=\"off\"\n            required\n          />\n          <label htmlFor={`armor-points${index}-${randomId}`}>Points</label>\n          <NumberInput\n            id={`armor-points${index}-${randomId}`}\n            className=\"input\"\n            value={armor.points}\n            onChange={(event) =>\n              handleSecondLevelFieldChange({\n                index,\n                key: \"armor\",\n                field: \"points\",\n                value: Number(event.target.value),\n              })\n            }\n            required\n          />\n          <div className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              id={`armor-perModel${index}-${randomId}`}\n              onChange={() =>\n                handleSecondLevelFieldChange({\n                  index,\n                  key: \"armor\",\n                  field: \"perModel\",\n                  value: !armor.perModel,\n                })\n              }\n              checked={armor.perModel}\n              className=\"checkbox__input\"\n            />\n            <label\n              htmlFor={`armor-perModel${index}-${randomId}`}\n              className=\"checkbox__label\"\n            >\n              Points count for each model\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              id={`armor-active${index}-${randomId}`}\n              onChange={() =>\n                handleSecondLevelFieldChange({\n                  index,\n                  key: \"armor\",\n                  field: \"active\",\n                  value: !armor.active,\n                })\n              }\n              checked={armor.active}\n              className=\"checkbox__input\"\n            />\n            <label\n              htmlFor={`armor-active${index}-${randomId}`}\n              className=\"checkbox__label\"\n            >\n              Selected by default\n            </label>\n          </div>\n          <p>\n            <i>(e.g. when \"Light armour\" is the default equipment)</i>\n          </p>\n          {existingUnit ? (\n            <Button\n              type=\"text\"\n              color=\"dark\"\n              spaceBottom\n              spaceTop\n              icon=\"delete\"\n              onClick={() => handleSecondLevelDelete({ index, key: \"armor\" })}\n            >\n              Remove entry\n            </Button>\n          ) : null}\n        </div>\n      ))}\n      <Button\n        type=\"secondary\"\n        icon=\"add\"\n        onClick={handleNewArmor}\n        spaceBottom\n        className=\"entity__second-level-button\"\n      >\n        New armor\n      </Button>\n\n      <hr />\n\n      <h3>Options</h3>\n      <p className=\"datasets__paragraph\">\n        All options are NOT mutually exclusive.\n        <br />\n        <i>(e.g. \"Shield\")</i>\n      </p>\n      {unit.options.map((option, index) => (\n        <div className=\"entity__second-level\" key={index}>\n          <label htmlFor={`options-name_en${index}-${randomId}`}>\n            Name English\n          </label>\n          <input\n            type=\"text\"\n            id={`options-name_en${index}-${randomId}`}\n            className=\"input\"\n            value={option.name_en}\n            onChange={(event) =>\n              handleSecondLevelFieldChange({\n                index,\n                key: \"options\",\n                field: \"name_en\",\n                value: event.target.value,\n              })\n            }\n            onBlur={(event) =>\n              handleSecondLevelNameBlur({\n                index,\n                key: \"options\",\n                value: event.target.value,\n              })\n            }\n            autoComplete=\"off\"\n            required\n          />\n          <label htmlFor={`options-name_de${index}-${randomId}`}>\n            Name German\n          </label>\n          <input\n            type=\"text\"\n            id={`options-name_de${index}-${randomId}`}\n            className=\"input\"\n            value={option.name_de}\n            onChange={(event) =>\n              handleSecondLevelFieldChange({\n                index,\n                key: \"options\",\n                field: \"name_de\",\n                value: event.target.value,\n              })\n            }\n            autoComplete=\"off\"\n            required\n          />\n          <label htmlFor={`options-points${index}-${randomId}`}>Points</label>\n          <NumberInput\n            id={`options-points${index}-${randomId}`}\n            className=\"input\"\n            value={option.points}\n            onChange={(event) =>\n              handleSecondLevelFieldChange({\n                index,\n                key: \"options\",\n                field: \"points\",\n                value: Number(event.target.value),\n              })\n            }\n            required\n          />\n          {type !== \"characters\" ? (\n            <div className=\"checkbox\">\n              <input\n                type=\"checkbox\"\n                id={`options-perModel${index}-${randomId}`}\n                onChange={() =>\n                  handleSecondLevelFieldChange({\n                    index,\n                    key: \"options\",\n                    field: \"perModel\",\n                    value: !option.perModel,\n                  })\n                }\n                checked={option.perModel}\n                className=\"checkbox__input\"\n              />\n              <label\n                htmlFor={`options-perModel${index}-${randomId}`}\n                className=\"checkbox__label\"\n              >\n                Points count for each model\n              </label>\n            </div>\n          ) : null}\n          <div className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              id={`options-stackable${index}-${randomId}`}\n              onChange={() =>\n                handleSecondLevelFieldChange({\n                  index,\n                  key: \"options\",\n                  field: \"stackable\",\n                  value: !option.stackable,\n                })\n              }\n              checked={option.stackable}\n              className=\"checkbox__input\"\n            />\n            <label\n              htmlFor={`options-stackable${index}-${randomId}`}\n              className=\"checkbox__label\"\n            >\n              Allow multiple selections\n            </label>\n          </div>\n          <p>\n            <i>(e.g. for Nightgoblin Fanatics)</i>\n          </p>\n          {option.stackable && (\n            <>\n              <br />\n              <label htmlFor={`options-minimum${index}-${randomId}`}>\n                Minimum\n              </label>\n              <NumberInput\n                id={`options-minimum${index}-${randomId}`}\n                className=\"input\"\n                min={0}\n                value={option.minimum}\n                onChange={(event) =>\n                  handleSecondLevelFieldChange({\n                    index,\n                    key: \"options\",\n                    field: \"stackable\",\n                    value: Number(event.target.value),\n                  })\n                }\n                required\n              />\n              <label htmlFor={`options-maximum${index}-${randomId}`}>\n                Maximum\n              </label>\n              <NumberInput\n                id={`options-maximum${index}-${randomId}`}\n                className=\"input\"\n                min={0}\n                value={option.maximum}\n                onChange={(event) =>\n                  handleSecondLevelFieldChange({\n                    index,\n                    key: \"options\",\n                    field: \"stackable\",\n                    value: Number(event.target.value),\n                  })\n                }\n                required\n              />\n            </>\n          )}\n          {existingUnit ? (\n            <Button\n              type=\"text\"\n              color=\"dark\"\n              spaceBottom\n              spaceTop\n              icon=\"delete\"\n              onClick={() => handleSecondLevelDelete({ index, key: \"options\" })}\n            >\n              Remove entry\n            </Button>\n          ) : null}\n        </div>\n      ))}\n      <Button\n        type=\"secondary\"\n        icon=\"add\"\n        onClick={handleNewOption}\n        spaceBottom\n        className=\"entity__second-level-button\"\n      >\n        New option\n      </Button>\n\n      {type === \"characters\" && (\n        <>\n          <hr />\n\n          <h3>Mounts</h3>\n          <p className=\"datasets__paragraph\">\n            All mount options are mutually exclusive.\n            <br />\n            <i>(e.g. \"On foot\" or \"Hippogryph\")</i>\n          </p>\n          {unit.mounts.map((mount, index) => (\n            <div className=\"entity__second-level\" key={index}>\n              <label htmlFor={`mounts-name_en${index}-${randomId}`}>\n                Name English\n              </label>\n              <input\n                type=\"text\"\n                id={`mounts-name_en${index}-${randomId}`}\n                className=\"input\"\n                value={mount.name_en}\n                onChange={(event) =>\n                  handleSecondLevelFieldChange({\n                    index,\n                    key: \"mounts\",\n                    field: \"name_en\",\n                    value: event.target.value,\n                  })\n                }\n                onBlur={(event) =>\n                  handleSecondLevelNameBlur({\n                    index,\n                    key: \"mounts\",\n                    value: event.target.value,\n                  })\n                }\n                autoComplete=\"off\"\n                required\n              />\n              <label htmlFor={`mounts-name_de${index}-${randomId}`}>\n                Name German\n              </label>\n              <input\n                type=\"text\"\n                id={`mounts-name_de${index}-${randomId}`}\n                className=\"input\"\n                value={mount.name_de}\n                onChange={(event) =>\n                  handleSecondLevelFieldChange({\n                    index,\n                    key: \"mounts\",\n                    field: \"name_de\",\n                    value: event.target.value,\n                  })\n                }\n                autoComplete=\"off\"\n                required\n              />\n              <label htmlFor={`mounts-points${index}-${randomId}`}>\n                Points\n              </label>\n              <NumberInput\n                id={`mounts-points${index}-${randomId}`}\n                className=\"input\"\n                value={mount.points}\n                onChange={(event) =>\n                  handleSecondLevelFieldChange({\n                    index,\n                    key: \"mounts\",\n                    field: \"points\",\n                    value: Number(event.target.value),\n                  })\n                }\n                required\n              />\n              <div className=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  id={`mounts-active${index}-${randomId}`}\n                  onChange={() =>\n                    handleSecondLevelFieldChange({\n                      index,\n                      key: \"mounts\",\n                      field: \"active\",\n                      value: !mount.active,\n                    })\n                  }\n                  checked={mount.active}\n                  className=\"checkbox__input\"\n                />\n                <label\n                  htmlFor={`mounts-active${index}-${randomId}`}\n                  className=\"checkbox__label\"\n                >\n                  Selected by default\n                </label>\n              </div>\n              <p>\n                <i>(e.g. when \"On foot\" is the default mount)</i>\n              </p>\n              {existingUnit ? (\n                <Button\n                  type=\"text\"\n                  color=\"dark\"\n                  spaceBottom\n                  spaceTop\n                  icon=\"delete\"\n                  onClick={() =>\n                    handleSecondLevelDelete({ index, key: \"mounts\" })\n                  }\n                >\n                  Remove entry\n                </Button>\n              ) : null}\n            </div>\n          ))}\n          <Button\n            type=\"secondary\"\n            icon=\"add\"\n            onClick={handleNewMount}\n            spaceBottom\n            className=\"entity__second-level-button\"\n          >\n            New mount\n          </Button>\n          <hr />\n          <h3>Allowed magic item categories</h3>\n          {magicItemTypes.map((item, itemIndex) => (\n            <div className=\"checkbox\" key={item}>\n              <input\n                type=\"checkbox\"\n                id={`${item}-${itemIndex}-${randomId}`}\n                onChange={(event) =>\n                  handleMagicChange({\n                    value: unit.magic.types.includes(item) ? \"off\" : \"on\",\n                    item,\n                  })\n                }\n                checked={unit.magic.types.includes(item)}\n                className=\"checkbox__input\"\n              />\n              <label\n                htmlFor={`${item}-${itemIndex}-${randomId}`}\n                className=\"checkbox__label\"\n              >\n                {item}\n              </label>\n            </div>\n          ))}\n          <label htmlFor={`magic-points-${randomId}`}>\n            Max. magic item points\n          </label>\n          <NumberInput\n            id={`magic-points-${randomId}`}\n            className=\"input\"\n            min={0}\n            value={unit.magic.maxPoints}\n            onChange={(event) =>\n              handleMagicPointsChange({\n                value: Number(event.target.value),\n              })\n            }\n          />\n        </>\n      )}\n\n      <Button\n        submitButton\n        spaceBottom\n        icon={existingUnit ? \"add-list\" : \"new-list\"}\n      >\n        {existingUnit ? \"Update unit\" : \"Add unit\"}\n      </Button>\n    </form>\n  );\n};\n","import { Fragment } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport classNames from \"classnames\";\n\nimport { getUnitPoints, getUnitCommandPoints } from \"../../utils/points\";\nimport { List } from \"../../components/list\";\nimport { NumberInput } from \"../../components/number-input\";\nimport { Icon } from \"../../components/icon\";\nimport { Header } from \"../../components/page\";\nimport { Button } from \"../../components/button\";\nimport { nameMap } from \"../../pages/magic\";\nimport { useLanguage } from \"../../utils/useLanguage\";\n\nimport \"./UnitPreview.css\";\n\nexport const UnitPreview = ({ unit, coreUnits, onClose }) => {\n  const { language } = useLanguage();\n  const intl = useIntl();\n  const detachments = coreUnits.filter((coreUnit) => coreUnit.detachment);\n  let magicPoints = 0;\n\n  unit?.magic?.items &&\n    unit?.magic?.items.forEach((option) => {\n      magicPoints += option.points;\n    });\n\n  return (\n    <>\n      <button onClick={onClose} className=\"unit-preview-background\" />\n      <div className=\"unit-preview\">\n        <>\n          <Header\n            isSection\n            headline={unit[`name_${language}`]}\n            subheadline={`${getUnitPoints(unit)} ${intl.formatMessage({\n              id: \"app.points\",\n            })}`}\n          />\n          <Button\n            className=\"unit-preview__close\"\n            icon=\"close\"\n            type=\"text\"\n            label=\"Close preview\"\n            color=\"dark\"\n            onClick={onClose}\n          />\n\n          {!unit.minimum &&\n            (!unit.command || (unit.command && !unit.command.length)) &&\n            (!unit.equipment || (unit.equipment && !unit.equipment.length)) &&\n            (!unit.armor || (unit.armor && !unit.armor.length)) &&\n            (!unit.mounts || (unit.mounts && !unit.mounts.length)) &&\n            (!unit.magic || (unit.magic && !unit.magic.maxPoints)) &&\n            (!unit.options || (unit.options && !unit.options.length)) && (\n              <i className=\"unit__empty\">\n                <FormattedMessage id=\"unit.noOptions\" />\n              </i>\n            )}\n          {unit.minimum ? (\n            <>\n              <label htmlFor=\"strength\" className=\"unit__strength\">\n                <FormattedMessage id=\"unit.unitSize\" />\n              </label>\n              <NumberInput\n                id=\"strength\"\n                className=\"input\"\n                min={unit.minimum}\n                max={unit.maximum}\n                value={unit.strength}\n                onChange={() => {}}\n              />\n            </>\n          ) : null}\n          {unit.command && unit.command.length > 0 && (\n            <>\n              <h2 className=\"unit__subline\">\n                <FormattedMessage id=\"unit.command\" />\n              </h2>\n              {unit.command.map(\n                (\n                  { name_de, name_en, points, perModel, active = false, magic },\n                  index\n                ) => {\n                  let commandMagicPoints = 0;\n\n                  if (unit.magic && unit.magic.items) {\n                    unit.magic.items\n                      .filter((item) => item.command === index)\n                      .forEach(({ points }) => {\n                        commandMagicPoints = commandMagicPoints + points;\n                      });\n                  }\n\n                  return (\n                    <Fragment key={index}>\n                      <div className=\"checkbox\">\n                        <input\n                          type=\"checkbox\"\n                          id={`command-${index}`}\n                          defaultChecked={active}\n                          className=\"checkbox__input\"\n                        />\n                        <label\n                          htmlFor={`command-${index}`}\n                          className=\"checkbox__label\"\n                        >\n                          {language === \"de\" ? name_de : name_en}\n                          <i className=\"checkbox__points\">\n                            {`${points} ${\n                              points === 1\n                                ? intl.formatMessage({\n                                    id: \"app.point\",\n                                  })\n                                : intl.formatMessage({\n                                    id: \"app.points\",\n                                  })\n                            }`}\n                            {perModel &&\n                              ` ${intl.formatMessage({\n                                id: \"unit.perModel\",\n                              })}`}\n                          </i>\n                        </label>\n                      </div>\n                      {magic?.maxPoints && active ? (\n                        <List\n                          // to={`/editor/${listId}/${type}/${unitId}/magic/${index}`}\n                          className=\"editor__list unit__link\"\n                          active={false}\n                        >\n                          <div className=\"editor__list-inner\">\n                            <b>\n                              {magic.types\n                                .map(\n                                  (type) => nameMap[type][`name_${language}`]\n                                )\n                                .join(\", \")}\n                            </b>\n                            <i className=\"checkbox__points\">\n                              <span\n                                className={classNames(\n                                  commandMagicPoints >\n                                    unit.command[index].magic.maxPoints &&\n                                    \"editor__error\"\n                                )}\n                              >\n                                {getUnitCommandPoints(\n                                  unit?.magic?.items.filter(\n                                    ({ command }) => command === index\n                                  )\n                                )}\n                              </span>{\" \"}\n                              / {unit.command[index].magic.maxPoints}{\" \"}\n                              <FormattedMessage id=\"app.points\" />\n                            </i>\n                            {commandMagicPoints >\n                              unit.command[index].magic.maxPoints && (\n                              <Icon\n                                symbol=\"error\"\n                                color=\"red\"\n                                className=\"unit__magic-icon\"\n                              />\n                            )}\n                          </div>\n                          {unit?.magic?.items && (\n                            <p>\n                              {unit.magic.items\n                                .filter(({ command }) => command === index)\n                                .map(({ name_de, name_en }) =>\n                                  language === \"de\" ? name_de : name_en\n                                )\n                                .join(\", \")}\n                            </p>\n                          )}\n                        </List>\n                      ) : null}\n                    </Fragment>\n                  );\n                }\n              )}\n            </>\n          )}\n          {unit.equipment && unit.equipment.length > 0 && (\n            <>\n              <h2 className=\"unit__subline\">\n                <FormattedMessage id=\"unit.equipment\" />\n              </h2>\n              {unit.equipment.map(\n                (\n                  { name_de, name_en, points, perModel, active = false },\n                  index\n                ) => (\n                  <div className=\"radio\" key={index}>\n                    <input\n                      type=\"radio\"\n                      id={`equipment-${index}`}\n                      name=\"equipment\"\n                      defaultChecked={active}\n                      className=\"radio__input\"\n                    />\n                    <label\n                      htmlFor={`equipment-${index}`}\n                      className=\"radio__label\"\n                    >\n                      {language === \"de\" ? name_de : name_en}\n                      <i className=\"checkbox__points\">\n                        {`${points} ${\n                          points === 1\n                            ? intl.formatMessage({\n                                id: \"app.point\",\n                              })\n                            : intl.formatMessage({\n                                id: \"app.points\",\n                              })\n                        }`}\n                        {perModel &&\n                          ` ${intl.formatMessage({\n                            id: \"unit.perModel\",\n                          })}`}\n                      </i>\n                    </label>\n                  </div>\n                )\n              )}\n            </>\n          )}\n          {unit.armor && unit.armor.length > 0 && (\n            <>\n              <h2 className=\"unit__subline\">\n                <FormattedMessage id=\"unit.armor\" />\n              </h2>\n              {unit.armor.map(\n                (\n                  { name_de, name_en, points, perModel, active = false },\n                  index\n                ) => (\n                  <div className=\"radio\" key={index}>\n                    <input\n                      type=\"radio\"\n                      id={`armor-${index}`}\n                      name=\"armor\"\n                      defaultChecked={active}\n                      className=\"radio__input\"\n                    />\n                    <label htmlFor={`armor-${index}`} className=\"radio__label\">\n                      {language === \"de\" ? name_de : name_en}\n                      <i className=\"checkbox__points\">\n                        {`${points} ${\n                          points === 1\n                            ? intl.formatMessage({\n                                id: \"app.point\",\n                              })\n                            : intl.formatMessage({\n                                id: \"app.points\",\n                              })\n                        }`}\n                        {perModel &&\n                          ` ${intl.formatMessage({\n                            id: \"unit.perModel\",\n                          })}`}\n                      </i>\n                    </label>\n                  </div>\n                )\n              )}\n            </>\n          )}\n          {unit.options && unit.options.length > 0 && (\n            <>\n              <h2 className=\"unit__subline\">\n                <FormattedMessage id=\"unit.options\" />\n              </h2>\n              {unit.options.map(\n                (\n                  {\n                    name_de,\n                    name_en,\n                    points,\n                    perModel,\n                    stackable,\n                    maximum,\n                    minimum = 0,\n                    stackableCount = minimum || 0,\n                    active = false,\n                  },\n                  index\n                ) =>\n                  !stackable ? (\n                    <div className=\"checkbox\" key={index}>\n                      <input\n                        type=\"checkbox\"\n                        id={`options-${index}`}\n                        defaultChecked={active}\n                        className=\"checkbox__input\"\n                      />\n                      <label\n                        htmlFor={`options-${index}`}\n                        className=\"checkbox__label\"\n                      >\n                        {language === \"de\" ? name_de : name_en}\n                        <i className=\"checkbox__points\">\n                          {`${points} ${\n                            points === 1\n                              ? intl.formatMessage({\n                                  id: \"app.point\",\n                                })\n                              : intl.formatMessage({\n                                  id: \"app.points\",\n                                })\n                          }`}\n                          {perModel &&\n                            ` ${intl.formatMessage({\n                              id: \"unit.perModel\",\n                            })}`}\n                        </i>\n                      </label>\n                    </div>\n                  ) : (\n                    <Fragment key={index}>\n                      <label\n                        htmlFor={`options-${index}`}\n                        className=\"unit__special-option\"\n                      >\n                        {language === \"de\" ? name_de : name_en}:\n                        <i className=\"checkbox__points\">\n                          {`${points} ${intl.formatMessage({\n                            id: \"app.points\",\n                          })} ${intl.formatMessage({\n                            id: \"unit.perModel\",\n                          })}`}\n                        </i>\n                      </label>\n                      <NumberInput\n                        id={`options-${index}`}\n                        className=\"input\"\n                        min={minimum}\n                        max={maximum}\n                        value={stackableCount}\n                        onChange={() => {}}\n                      />\n                    </Fragment>\n                  )\n              )}\n            </>\n          )}\n          {unit.regimentalUnit && (\n            <>\n              <h2 className=\"unit__subline unit__detachments-headline\">\n                <FormattedMessage id=\"unit.detachments\" />\n              </h2>\n              {detachments.map(({ name_de, name_en, id }) => (\n                <>\n                  <div className=\"list\" key={id}>\n                    <div className=\"list__inner unit__detachments-header\">\n                      <b className=\"unit__magic-headline\">\n                        {language === \"de\" ? name_de : name_en}\n                      </b>\n                      <Button\n                        type=\"secondary\"\n                        icon=\"add\"\n                        label={intl.formatMessage({ id: \"editor.add\" })}\n                        size=\"small\"\n                      />\n                    </div>\n                  </div>\n                  {unit.detachments &&\n                    unit.detachments\n                      .filter(\n                        (detachment) =>\n                          detachment.id.split(\".\")[0] === id.split(\".\")[0]\n                      )\n                      .map(({ name_de, name_en, strength, id, points }) => (\n                        <div className=\"list\" key={id}>\n                          <div className=\"list__inner unit__detachments\">\n                            <NumberInput\n                              id={`strength-${id}`}\n                              className=\"input\"\n                              min={5}\n                              value={strength}\n                              onChange={() => {}}\n                            />\n                            <span>\n                              <b>{language === \"de\" ? name_de : name_en}</b>\n                              <i>{`${getUnitPoints({\n                                strength,\n                                points,\n                              })} ${intl.formatMessage({\n                                id: \"app.points\",\n                              })}`}</i>\n                            </span>\n                            <Button\n                              type=\"secondary\"\n                              icon=\"close\"\n                              label={intl.formatMessage({ id: \"misc.remove\" })}\n                              size=\"small\"\n                            />\n                          </div>\n                        </div>\n                      ))}\n                </>\n              ))}\n            </>\n          )}\n          {unit.mounts && unit.mounts.length > 0 && (\n            <>\n              <h2 className=\"unit__subline\">\n                <FormattedMessage id=\"unit.mount\" />\n              </h2>\n              {unit.mounts.map(\n                ({ name_de, name_en, points, active = false }, index) => (\n                  <div className=\"radio\" key={index}>\n                    <input\n                      type=\"radio\"\n                      id={`mounts-${index}`}\n                      name=\"mounts\"\n                      defaultChecked={active}\n                      className=\"radio__input\"\n                    />\n                    <label htmlFor={`mounts-${index}`} className=\"radio__label\">\n                      {language === \"de\" ? name_de : name_en}\n                      <i className=\"checkbox__points\">{`${points} ${intl.formatMessage(\n                        {\n                          id: \"app.points\",\n                        }\n                      )}`}</i>\n                    </label>\n                  </div>\n                )\n              )}\n            </>\n          )}\n          {unit.magic?.maxPoints ? (\n            <List\n              // to={`/editor/${listId}/${type}/${unitId}/magic`}\n              className=\"editor__list unit__link\"\n              active={false}\n            >\n              <div className=\"editor__list-inner\">\n                <b className=\"unit__magic-headline\">\n                  <FormattedMessage id=\"unit.magicItems\" />\n                </b>\n                <i className=\"checkbox__points\">\n                  <span\n                    className={classNames(\n                      magicPoints > unit.magic.maxPoints && \"editor__error\"\n                    )}\n                  >\n                    {magicPoints}\n                  </span>{\" \"}\n                  / {unit.magic.maxPoints} <FormattedMessage id=\"app.points\" />\n                </i>\n                {magicPoints > unit.magic.maxPoints && (\n                  <Icon\n                    symbol=\"error\"\n                    color=\"red\"\n                    className=\"unit__magic-icon\"\n                  />\n                )}\n              </div>\n              {unit.magic.items && (\n                <p>\n                  {unit.magic.items\n                    .map(({ name_de, name_en }) =>\n                      language === \"de\" ? name_de : name_en\n                    )\n                    .join(\", \")}\n                </p>\n              )}\n            </List>\n          ) : null}\n        </>\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Header, Main } from \"../../components/page\";\nimport { Button } from \"../../components/button\";\nimport { Select } from \"../../components/select\";\nimport { Expandable } from \"../../components/expandable\";\nimport { Spinner } from \"../../components/spinner\";\nimport { fetcher } from \"../../utils/fetcher\";\nimport gameSystems from \"../../assets/armies.json\";\n\nimport { Entity } from \"./Entity\";\nimport { UnitPreview } from \"./UnitPreview\";\nimport \"./Datasets.css\";\n\nexport const Datasets = ({ isMobile }) => {\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [previewUnit, setPreviewUnit] = useState(null);\n  const [armyInput, setArmyInput] = useState(\"\");\n  const [copied, setCopied] = useState(false);\n  const [copyError, setCopyError] = useState(false);\n  const [army, setArmy] = useState(\"empire-of-man\");\n  const game = \"the-old-world\";\n  const localDataset = localStorage.getItem(\"owb.dataset\");\n  const [dataset, setDataset] = useState({\n    characters: [],\n    core: [],\n    special: [],\n    rare: [],\n    mercenaries: [],\n    allies: [],\n  });\n  const intl = useIntl();\n  const copyText = () => {\n    navigator.clipboard &&\n      navigator.clipboard.writeText(JSON.stringify(dataset, null, 2)).then(\n        () => {\n          setCopied(true);\n        },\n        () => {\n          setCopyError(true);\n        }\n      );\n  };\n  const handleSubmit = ({ unit, isNew, type }) => {\n    if (isNew) {\n      const newDataset = { ...dataset, [type]: [...dataset[type], unit] };\n\n      setDataset(newDataset);\n      localStorage.setItem(\"owb.dataset\", JSON.stringify(newDataset, null, 2));\n    } else {\n      const newDataset = {\n        ...dataset,\n        [type]: dataset[type].map((existingUnit) =>\n          existingUnit.id === unit.id ? unit : existingUnit\n        ),\n      };\n\n      setDataset(newDataset);\n      localStorage.setItem(\"owb.dataset\", JSON.stringify(newDataset, null, 2));\n    }\n\n    window.scrollTo(0, 0);\n  };\n  const handleDelete = ({ id, type }) => {\n    const newDataset = {\n      ...dataset,\n      [type]: dataset[type].filter((existingUnit) => existingUnit.id !== id),\n    };\n\n    setDataset(newDataset);\n    localStorage.setItem(\"owb.dataset\", JSON.stringify(newDataset, null, 2));\n    window.scrollTo(0, 0);\n  };\n  const handleArmyChange = (value) => {\n    setArmy(value);\n  };\n  const handleLoadArmy = () => {\n    setIsLoading(true);\n    fetcher({\n      url: `games/${game}/${army}`,\n      onSuccess: (existingDataset) => {\n        setDataset(existingDataset);\n        localStorage.setItem(\n          \"owb.dataset\",\n          JSON.stringify(existingDataset, null, 2)\n        );\n        setIsLoading(false);\n      },\n    });\n  };\n  const handleArmyInputBlur = (event) => {\n    setArmyInput(event.target.value);\n  };\n  const handleArmyFromJsonClick = () => {\n    try {\n      setDataset(JSON.parse(armyInput));\n      localStorage.setItem(\"owb.dataset\", armyInput);\n      setArmyInput(\"\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handleArmyFromLocalClick = () => {\n    try {\n      setDataset(JSON.parse(localStorage.getItem(\"owb.dataset\")));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handlePreview = ({ unit }) => {\n    setPreviewUnit(unit);\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`Old World Builder | ${intl.formatMessage({\n            id: \"footer.datasets\",\n          })}`}\n        </title>\n      </Helmet>\n\n      <Header headline=\"Old World Builder\" hasMainNavigation />\n\n      <Main className=\"datasets\">\n        <Button to=\"/\" icon=\"home\" centered spaceBottom>\n          <FormattedMessage id=\"misc.startpage\" />\n        </Button>\n\n        <div className=\"datasets__info\">\n          <h2 className=\"page-headline\">Datasets Editor</h2>\n          <p className=\"datasets__paragraph\">\n            Thank you for taking the time to improve the{\" \"}\n            <i>Old World Builder</i>! You can expand existing army data, add\n            missing translations or create a new army dataset.\n          </p>\n          <h3>What is a dataset?</h3>\n          <p className=\"datasets__paragraph\">\n            A datasets contains the data of all units required to create an army\n            list in the <i>Old World Builder</i>. The datasets for each army are\n            defined in a{\" \"}\n            <a\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON\"\n            >\n              JSON format\n            </a>{\" \"}\n            (although you don't have to edit these manually).\n          </p>\n          <h3>Notes before you get started</h3>\n          <ul>\n            <li>\n              Currently only datasets for \"Warhammer: The Old World\" can be\n              created on this page\n            </li>\n            <li>\n              Translate texts from the army books very carefully and exactly as\n              they appear in the book\n            </li>\n            <li>Proofread after you're done</li>\n            <li>\n              If a special rule cannot be mapped, write to us in{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://discord.gg/87nUyjUxTU\"\n              >\n                Discord\n              </a>\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"datasets__columns\">\n          <section className=\"column datasets__column\">\n            <header className=\"editor__header\">\n              <h2>Load a dataset</h2>\n            </header>\n\n            <Select\n              options={gameSystems.filter(({ id }) => id === game)[0].armies}\n              onChange={handleArmyChange}\n              selected=\"empire-of-man\"\n              spaceTop\n              spaceBottom\n              required\n            />\n            <Button onClick={handleLoadArmy}>Load existing dataset</Button>\n            <hr />\n            <input\n              type=\"text\"\n              name=\"army\"\n              className=\"input\"\n              autoComplete=\"off\"\n              value={armyInput}\n              onChange={handleArmyInputBlur}\n              placeholder=\"Paste your .json file\"\n            />\n            <Button onClick={handleArmyFromJsonClick}>Load from .json</Button>\n            <hr />\n            <Button\n              disabled={!Boolean(localDataset)}\n              onClick={handleArmyFromLocalClick}\n              spaceBottom\n            >\n              Load local dataset\n            </Button>\n            <p>\n              The most current dataset is always saved locally, so you can\n              continue working on it even after a reload.\n            </p>\n          </section>\n\n          <section className=\"column datasets__column\">\n            <header className=\"editor__header\">\n              <h2>Edit units</h2>\n            </header>\n            {isLoading ? (\n              <Spinner />\n            ) : (\n              <>\n                {dataset.characters.length > 0 && (\n                  <h3 className=\"datasets__edit-headline\">Characters</h3>\n                )}\n                <ul>\n                  {dataset.characters.map((unit, index) => (\n                    <Expandable\n                      headline={\n                        <span className=\"dataset__unit-header\">\n                          {unit.name_en}\n                          <span>\n                            <Button\n                              icon=\"delete\"\n                              type=\"text\"\n                              label=\"Delete unit\"\n                              color=\"dark\"\n                              onClick={() =>\n                                handleDelete({\n                                  type: \"characters\",\n                                  id: unit.id,\n                                })\n                              }\n                            />\n                            <Button\n                              icon=\"preview\"\n                              type=\"text\"\n                              label=\"Preview unit\"\n                              color=\"dark\"\n                              onClick={() => handlePreview({ unit })}\n                            />\n                          </span>\n                        </span>\n                      }\n                      noMargin\n                      className=\"datasets__unit-type datasets__unit\"\n                      key={index}\n                    >\n                      <Entity\n                        unit={unit}\n                        type=\"characters\"\n                        onSubmit={handleSubmit}\n                      />\n                    </Expandable>\n                  ))}\n                </ul>\n                {dataset.core.length > 0 && (\n                  <h3 className=\"datasets__edit-headline\">Core Units</h3>\n                )}\n                <ul>\n                  {dataset.core.map((unit, index) => (\n                    <Expandable\n                      headline={\n                        <span className=\"dataset__unit-header\">\n                          {unit.name_en}\n                          <span>\n                            <Button\n                              icon=\"delete\"\n                              type=\"text\"\n                              label=\"Delete unit\"\n                              color=\"dark\"\n                              onClick={() =>\n                                handleDelete({ type: \"core\", id: unit.id })\n                              }\n                            />\n                            <Button\n                              icon=\"preview\"\n                              type=\"text\"\n                              label=\"Preview unit\"\n                              color=\"dark\"\n                              onClick={() => handlePreview({ unit })}\n                            />\n                          </span>\n                        </span>\n                      }\n                      noMargin\n                      className=\"datasets__unit-type datasets__unit\"\n                      key={index}\n                    >\n                      <Entity\n                        unit={unit}\n                        type=\"core\"\n                        onSubmit={handleSubmit}\n                        onDelete={handleDelete}\n                      />\n                    </Expandable>\n                  ))}\n                </ul>\n                {dataset.special.length > 0 && (\n                  <h3 className=\"datasets__edit-headline\">Special Units</h3>\n                )}\n                <ul>\n                  {dataset.special.map((unit, index) => (\n                    <Expandable\n                      headline={\n                        <span className=\"dataset__unit-header\">\n                          {unit.name_en}\n                          <span>\n                            <Button\n                              icon=\"delete\"\n                              type=\"text\"\n                              label=\"Delete unit\"\n                              color=\"dark\"\n                              onClick={() =>\n                                handleDelete({ type: \"special\", id: unit.id })\n                              }\n                            />\n                            <Button\n                              icon=\"preview\"\n                              type=\"text\"\n                              label=\"Preview unit\"\n                              color=\"dark\"\n                              onClick={() => handlePreview({ unit })}\n                            />\n                          </span>\n                        </span>\n                      }\n                      noMargin\n                      className=\"datasets__unit-type datasets__unit\"\n                      key={index}\n                    >\n                      <Entity\n                        unit={unit}\n                        type=\"special\"\n                        onSubmit={handleSubmit}\n                        onDelete={handleDelete}\n                      />\n                    </Expandable>\n                  ))}\n                </ul>\n                {dataset.rare.length > 0 && (\n                  <h3 className=\"datasets__edit-headline\">Rare Units</h3>\n                )}\n                <ul>\n                  {dataset.rare.map((unit, index) => (\n                    <Expandable\n                      headline={\n                        <span className=\"dataset__unit-header\">\n                          {unit.name_en}\n                          <span>\n                            <Button\n                              icon=\"delete\"\n                              type=\"text\"\n                              label=\"Delete unit\"\n                              color=\"dark\"\n                              onClick={() =>\n                                handleDelete({ type: \"rare\", id: unit.id })\n                              }\n                            />\n                            <Button\n                              icon=\"preview\"\n                              type=\"text\"\n                              label=\"Preview unit\"\n                              color=\"dark\"\n                              onClick={() => handlePreview({ unit })}\n                            />\n                          </span>\n                        </span>\n                      }\n                      noMargin\n                      className=\"datasets__unit-type datasets__unit\"\n                      key={index}\n                    >\n                      <Entity\n                        unit={unit}\n                        type=\"rare\"\n                        onSubmit={handleSubmit}\n                        onDelete={handleDelete}\n                      />\n                    </Expandable>\n                  ))}\n                </ul>\n              </>\n            )}\n          </section>\n\n          <section className=\"column datasets__column\">\n            <header className=\"editor__header\">\n              <h2>Add new unit</h2>\n            </header>\n            <Expandable\n              headline=\"Character\"\n              noMargin\n              className=\"datasets__unit-type\"\n            >\n              <Entity type=\"characters\" onSubmit={handleSubmit} />\n            </Expandable>\n            <Expandable\n              headline=\"Core Unit\"\n              noMargin\n              className=\"datasets__unit-type\"\n            >\n              <Entity type=\"core\" onSubmit={handleSubmit} />\n            </Expandable>\n            <Expandable\n              headline=\"Special Unit\"\n              noMargin\n              className=\"datasets__unit-type\"\n            >\n              <Entity type=\"special\" onSubmit={handleSubmit} />\n            </Expandable>\n            <Expandable\n              headline=\"Rare Unit\"\n              noMargin\n              className=\"datasets__unit-type\"\n            >\n              <Entity type=\"rare\" onSubmit={handleSubmit} />\n            </Expandable>\n          </section>\n\n          <section className=\"column datasets__column\">\n            <header className=\"editor__header\">\n              <h2>JSON output</h2>\n            </header>\n            <Button\n              icon={copied ? \"check\" : \"copy\"}\n              centered\n              spaceTop\n              spaceBottom\n              onClick={copyText}\n            >\n              {copied ? \"Copied\" : \"Copy JSON\"}\n            </Button>\n            {copyError && (\n              <p className=\"export__error\">\n                <FormattedMessage id=\"export.error\" />\n              </p>\n            )}\n            <p className=\"datasets__paragraph\">\n              When you're done editing, copy the text and post it in the{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://discord.com/channels/1120710419108085780/1120720528068583434\"\n              >\n                \"Datasets Contribution\" Discord Channel\n              </a>\n              .\n            </p>\n            <p className=\"datasets__paragraph\">\n              If you're a bit tech-savvy, you can also create a pull request\n              directly in{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/nthiebes/old-world-builder/pulls\"\n              >\n                GitHub\n              </a>\n              .\n            </p>\n            <textarea\n              className=\"datasets__output\"\n              rows=\"10\"\n              spellCheck=\"false\"\n              data-gramm=\"false\"\n              value={JSON.stringify(dataset, null, 2)}\n              onChange={() => {}}\n            />\n          </section>\n        </div>\n\n        {previewUnit ? (\n          <UnitPreview\n            unit={{ ...previewUnit, strength: 0 }}\n            onClose={() => setPreviewUnit(null)}\n            coreUnits={dataset.core}\n          />\n        ) : null}\n      </Main>\n    </>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Header, Main } from \"../../components/page\";\nimport { Button } from \"../../components/button\";\n\nexport const NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Old World Builder | 404</title>\n      </Helmet>\n\n      <Header headline=\"Old World Builder\" />\n\n      <Main compact>\n        <Button to=\"/\" icon=\"home\" centered>\n          <FormattedMessage id=\"misc.startpage\" />\n        </Button>\n\n        <h2>\n          <FormattedMessage id=\"404.title\" />\n        </h2>\n        <p>\n          <FormattedMessage id=\"404.title\" />\n        </p>\n      </Main>\n    </>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Header, Main } from \"../../components/page\";\nimport { Button } from \"../../components/button\";\n\nexport const Privacy = () => {\n  const location = useLocation();\n  const intl = useIntl();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`Old World Builder | ${intl.formatMessage({\n            id: \"footer.privacy\",\n          })}`}\n        </title>\n      </Helmet>\n\n      <Header headline=\"Old World Builder\" hasMainNavigation />\n\n      <Main compact>\n        <Button to=\"/\" icon=\"home\" centered>\n          <FormattedMessage id=\"misc.startpage\" />\n        </Button>\n        <h2 className=\"page-headline\">\n          <FormattedMessage id=\"footer.privacy\" />\n        </h2>\n        <p>\n          The \"Old World Builder\" is built as an Open Source app. This SERVICE\n          is provided by at no cost and is intended for use as is.\n        </p>\n        <p>\n          This page is used to inform visitors regarding my policies with the\n          collection, use, and disclosure of Personal Information if anyone\n          decided to use my Service.\n        </p>\n        <p>\n          If you choose to use my Service, then you agree to the collection and\n          use of information in relation to this policy. The Personal\n          Information that I collect is used for providing and improving the\n          Service. I will not use or share your information with anyone except\n          as described in this Privacy Policy.\n        </p>\n        <h3>Information Collection and Use</h3>\n        <p>This app does not collect or store personal data.</p>\n        <p>\n          The app does use third-party services that may collect information\n          used to identify you.\n        </p>\n        <p>\n          Links to the privacy policy of third-party service providers used by\n          the app:\n        </p>\n        <ul>\n          <li>\n            <a\n              href=\"https://www.google.com/policies/privacy/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Google Play Services\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"https://sentry.io/privacy/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sentry\n            </a>\n          </li>\n        </ul>\n        <br />\n        <h3>Log Data</h3>\n        <p>\n          I want to inform you that whenever you use my Service, in a case of an\n          error in the app I collect data and information (through third-party\n          products) on your phone called Log Data. This Log Data may include\n          information such as your device Internet Protocol (“IP”) address,\n          device name, operating system version, the configuration of the app\n          when utilizing my Service, the time and date of your use of the\n          Service, and other statistics.\n        </p>\n        <h3>Cookies</h3>\n        <p>\n          Cookies are files with a small amount of data that are commonly used\n          as anonymous unique identifiers. These are sent to your browser from\n          the websites that you visit and are stored on your device's internal\n          memory.\n        </p>\n        <p>This Service does not use these “cookies”.</p>\n\n        <h3>Links to Other Sites</h3>\n        <p>\n          This Service contains links to other sites. If you click on a\n          third-party link, you will be directed to that site. Note that these\n          external sites are not operated by me. Therefore, I strongly advise\n          you to review the Privacy Policy of these websites. I have no control\n          over and assume no responsibility for the content, privacy policies,\n          or practices of any third-party sites or services.\n        </p>\n        <h3>Changes to This Privacy Policy</h3>\n        <p>\n          I may update our Privacy Policy from time to time. Thus, you are\n          advised to review this page periodically for any changes. I will\n          notify you of any changes by posting the new Privacy Policy on this\n          page.\n        </p>\n        <p>This policy is effective as of 2024-01-04.</p>\n\n        <h3>Contact Us</h3>\n        <p>\n          If you have any questions or suggestions about my Privacy Policy, do\n          not hesitate to contact me at{\" \"}\n          <Link to=\"/help\">old-world-builder.com/help</Link>.\n        </p>\n      </Main>\n    </>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport { FormattedMessage, FormattedDate, useIntl } from \"react-intl\";\nimport { Helmet } from \"react-helmet-async\";\n\nimport { Header, Main } from \"../../components/page\";\nimport { Button } from \"../../components/button\";\n\nimport \"./Changelog.css\";\n\nexport const Changelog = () => {\n  const location = useLocation();\n  const intl = useIntl();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`Old World Builder | ${intl.formatMessage({\n            id: \"footer.changelog\",\n          })}`}\n        </title>\n      </Helmet>\n\n      <Header headline=\"Old World Builder\" hasMainNavigation />\n\n      <Main compact className=\"changelog\">\n        <Button to=\"/\" icon=\"home\" centered>\n          <FormattedMessage id=\"misc.startpage\" />\n        </Button>\n\n        <h2 className=\"page-headline\">\n          <FormattedMessage id=\"changelog.title\" />\n        </h2>\n        <h3>v0.4.2</h3>\n        <p>\n          <time>\n            <i>\n              <FormattedDate\n                value={new Date(\"2024-01-07 11:11:11\")}\n                month=\"long\"\n                day=\"2-digit\"\n                year=\"numeric\"\n              />\n            </i>\n          </time>\n        </p>\n        <ul>\n          <li>\n            <FormattedMessage\n              id=\"changelog.change0\"\n              values={{\n                datasets: (\n                  <Link to=\"/datasets\">\n                    <FormattedMessage id=\"footer.datasets\" />\n                  </Link>\n                ),\n              }}\n            />\n          </li>\n          <li>\n            <FormattedMessage id=\"changelog.change1\" />\n          </li>\n          <li>\n            <FormattedMessage\n              id=\"changelog.change2\"\n              values={{\n                privacy: (\n                  <Link to=\"/privacy\">\n                    <FormattedMessage id=\"footer.privacy\" />\n                  </Link>\n                ),\n              }}\n            />\n          </li>\n          <li>\n            <FormattedMessage id=\"changelog.change3\" />\n          </li>\n        </ul>\n      </Main>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\n\nimport { NewList } from \"./pages/new-list\";\nimport { Editor } from \"./pages/editor\";\nimport { Home } from \"./pages/home\";\nimport { Unit } from \"./pages/unit\";\nimport { EditList } from \"./pages/edit-list\";\nimport { Magic } from \"./pages/magic\";\nimport { About } from \"./pages/about\";\nimport { Add } from \"./pages/add\";\nimport { Help } from \"./pages/help\";\nimport { Export } from \"./pages/export\";\nimport { Print } from \"./pages/print\";\nimport { DuplicateList } from \"./pages/duplicate-list\";\nimport { Rename } from \"./pages/rename\";\nimport { Datasets } from \"./pages/datasets\";\nimport { NotFound } from \"./pages/not-found\";\nimport { Privacy } from \"./pages/privacy\";\nimport { Changelog } from \"./pages/changelog\";\nimport { setLists } from \"./state/lists\";\nimport { Header, Main } from \"./components/page\";\n\nimport \"./App.css\";\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  const [isMobile, setIsMobile] = useState(\n    window.matchMedia(\"(max-width: 1279px)\").matches\n  );\n\n  useEffect(() => {\n    const localLists = localStorage.getItem(\"owb.lists\");\n\n    localStorage.setItem(\"owb.lists\", localLists);\n\n    dispatch(setLists(JSON.parse(localLists)));\n  }, [dispatch]);\n\n  useEffect(() => {\n    window\n      .matchMedia(\"(max-width: 1279px)\")\n      .addEventListener(\"change\", (event) => setIsMobile(event.matches));\n  }, []);\n\n  return (\n    <BrowserRouter>\n      {isMobile ? (\n        <Switch>\n          <Route path=\"/editor/:listId/edit\">{<EditList isMobile />}</Route>\n          <Route path=\"/editor/:listId/export\">{<Export isMobile />}</Route>\n          <Route path=\"/editor/:listId/duplicate\">\n            {<DuplicateList isMobile />}\n          </Route>\n          <Route path=\"/editor/:listId/add/:type\">{<Add isMobile />}</Route>\n          <Route path=\"/editor/:listId/:type/:unitId/magic/:command\">\n            {<Magic isMobile />}\n          </Route>\n          <Route path=\"/editor/:listId/:type/:unitId/rename\">\n            {<Rename isMobile />}\n          </Route>\n          <Route path=\"/editor/:listId/:type/:unitId/magic\">\n            {<Magic isMobile />}\n          </Route>\n          <Route path=\"/editor/:listId/:type/:unitId\">\n            {<Unit isMobile />}\n          </Route>\n          <Route path=\"/editor/:listId\">{<Editor isMobile />}</Route>\n          <Route path=\"/new\">{<NewList isMobile />}</Route>\n          <Route path=\"/about\">{<About />}</Route>\n          <Route path=\"/help\">{<Help />}</Route>\n          <Route path=\"/privacy\">{<Privacy />}</Route>\n          <Route path=\"/datasets\">{<Datasets isMobile />}</Route>\n          <Route path=\"/changelog\">{<Changelog />}</Route>\n          <Route path=\"/print/:listId\">{<Print />}</Route>\n          <Route path=\"/\" exact>\n            {<Home isMobile />}\n          </Route>\n          <Route path=\"*\">{<NotFound />}</Route>\n        </Switch>\n      ) : (\n        <Switch>\n          <Route path=\"/about\">{<About />}</Route>\n          <Route path=\"/help\">{<Help />}</Route>\n          <Route path=\"/privacy\">{<Privacy />}</Route>\n          <Route path=\"/datasets\">{<Datasets />}</Route>\n          <Route path=\"/changelog\">{<Changelog />}</Route>\n          <Route path=\"/print/:listId\">{<Print />}</Route>\n          <Route path=\"/\">\n            <Header headline=\"Old World Builder\" hasMainNavigation />\n            <Main isDesktop>\n              <section className=\"column\">\n                <Home />\n              </section>\n              <section className=\"column\">\n                <Switch>\n                  <Route path=\"/new\">{<NewList />}</Route>\n                  <Route path=\"/editor/:listId\">{<Editor />}</Route>\n                </Switch>\n              </section>\n              <section className=\"column\">\n                <Switch>\n                  <Route path=\"/editor/:listId/edit\">{<EditList />}</Route>\n                  <Route path=\"/editor/:listId/export\">{<Export />}</Route>\n                  <Route path=\"/editor/:listId/duplicate\">\n                    {<DuplicateList />}\n                  </Route>\n                  <Route path=\"/editor/:listId/add/:type\">{<Add />}</Route>\n                  <Route path=\"/editor/:listId/:type/:unitId\">{<Unit />}</Route>\n                </Switch>\n              </section>\n              <section className=\"column\">\n                <Switch>\n                  <Route path=\"/editor/:listId/:type/:unitId/magic/:command\">\n                    {<Magic />}\n                  </Route>\n                  <Route path=\"/editor/:listId/:type/:unitId/rename\">\n                    {<Rename />}\n                  </Route>\n                  <Route path=\"/editor/:listId/:type/:unitId/magic\">\n                    {<Magic />}\n                  </Route>\n                </Switch>\n              </section>\n            </Main>\n          </Route>\n        </Switch>\n      )}\n    </BrowserRouter>\n  );\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const errorSlice = createSlice({\n  name: \"errors\",\n  initialState: [],\n  reducers: {\n    setErrors: (state, { payload }) => {\n      return payload || [];\n    },\n    addError: (state, { payload }) => {\n      return [...state, payload];\n    },\n  },\n});\n\nexport const { setErrors, addError } = errorSlice.actions;\n\nexport default errorSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport listsReducer from \"./state/lists\";\nimport armyReducer from \"./state/army\";\nimport itemsReducer from \"./state/items\";\nimport errorsReducer from \"./state/errors\";\n\nexport default configureStore({\n  reducer: {\n    lists: listsReducer,\n    army: armyReducer,\n    items: itemsReducer,\n    errors: errorsReducer,\n  },\n});\n"],"sourceRoot":""}